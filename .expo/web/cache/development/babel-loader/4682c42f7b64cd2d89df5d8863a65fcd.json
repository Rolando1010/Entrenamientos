{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport DropDown from \"../components/drop-down\";\nimport { LineGraph } from \"../components/graphs\";\nimport { getCategories, getExercisesCategory } from \"../services/categories\";\nimport { getRMsExercise } from \"../services/exercises\";\nimport { statisticsStyles } from \"../styles/pages\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar statisticsOptions = [\"1RM Estimado\", \"Máximo peso\", \"Máximas repeticiones\"];\n\nvar Statistics = function Statistics() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      optionSelected = _useState2[0],\n      setOptionSelected = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      categories = _useState4[0],\n      setCategories = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      categorySelected = _useState6[0],\n      setCategorySelected = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      exercises = _useState8[0],\n      setExercises = _useState8[1];\n\n  var _useState9 = useState(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      exerciseSelected = _useState10[0],\n      setExerciseSelected = _useState10[1];\n\n  var _useState11 = useState({\n    isNotGenerated: true\n  }),\n      _useState12 = _slicedToArray(_useState11, 2),\n      graphData = _useState12[0],\n      setGraphData = _useState12[1];\n\n  useEffect(function () {\n    getCategories().then(setCategories);\n  }, []);\n  useEffect(function () {\n    if (categorySelected) {\n      getExercisesCategory(categorySelected).then(setExercises);\n    }\n  }, [categorySelected]);\n  useEffect(function () {\n    if (exerciseSelected) {\n      getRMsExercise(exerciseSelected).then(function (_ref) {\n        var days = _ref.days,\n            rms = _ref.rms;\n\n        if (days.length && rms.length) {\n          setGraphData({\n            x: days,\n            y: rms\n          });\n        } else {\n          setGraphData({\n            isEmpty: true\n          });\n        }\n      });\n    }\n  }, [exerciseSelected]);\n  return _jsxs(_Fragment, {\n    children: [_jsx(DropDown, {\n      value: optionSelected,\n      onChange: setOptionSelected,\n      options: statisticsOptions,\n      emptyStartMessage: \"Seleccione una opci\\xF3n\"\n    }), optionSelected && _jsx(DropDown, {\n      value: categorySelected,\n      onChange: setCategorySelected,\n      options: categories,\n      emptyStartMessage: \"Seleccione una categor\\xEDa\"\n    }), categorySelected && _jsx(DropDown, {\n      value: exerciseSelected,\n      onChange: setExerciseSelected,\n      options: exercises,\n      emptyStartMessage: \"Seleccione un ejercicio\"\n    }), graphData.isNotGenerated ? _jsx(NoGraph, {\n      children: \"No se ha generado ning\\xFAn gr\\xE1fico\"\n    }) : graphData.isEmpty ? _jsx(NoGraph, {\n      children: \"No hay datos disponibles para las opciones seleccionadas\"\n    }) : _jsx(LineGraph, {\n      x: graphData.x,\n      y: graphData.y\n    })]\n  });\n};\n\nvar NoGraph = function NoGraph(_ref2) {\n  var children = _ref2.children;\n  return _jsxs(View, {\n    style: statisticsStyles.noGraph,\n    children: [_jsx(Image, {\n      source: require(\"../../assets/no-graph.png\")\n    }), _jsx(Text, {\n      style: statisticsStyles.noGraphText,\n      children: children\n    })]\n  });\n};\n\nexport default Statistics;","map":{"version":3,"names":["useEffect","useState","DropDown","LineGraph","getCategories","getExercisesCategory","getRMsExercise","statisticsStyles","statisticsOptions","Statistics","optionSelected","setOptionSelected","categories","setCategories","categorySelected","setCategorySelected","exercises","setExercises","exerciseSelected","setExerciseSelected","isNotGenerated","graphData","setGraphData","then","days","rms","length","x","y","isEmpty","NoGraph","children","noGraph","require","noGraphText"],"sources":["C:/Users/ROLANDO MORA/Documents/Proyectos/Entrenamientos/V2/src/screens/statistics.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { Text, Image, View } from \"react-native\";\r\nimport DropDown from \"../components/drop-down\";\r\nimport { LineGraph } from \"../components/graphs\";\r\nimport { getCategories, getExercisesCategory } from \"../services/categories\";\r\nimport { getRMsExercise } from \"../services/exercises\";\r\nimport { statisticsStyles } from \"../styles/pages\";\r\n\r\nconst statisticsOptions = [\r\n    \"1RM Estimado\",\r\n    \"Máximo peso\",\r\n    \"Máximas repeticiones\"\r\n];\r\n\r\nconst Statistics = () => {\r\n    const [optionSelected, setOptionSelected] = useState();\r\n    const [categories, setCategories] = useState([]);\r\n    const [categorySelected, setCategorySelected] = useState();\r\n    const [exercises, setExercises] = useState([]);\r\n    const [exerciseSelected, setExerciseSelected] = useState();\r\n    const [graphData, setGraphData] = useState({ isNotGenerated: true });\r\n\r\n    useEffect(() => {\r\n        getCategories().then(setCategories);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if(categorySelected){\r\n            getExercisesCategory(categorySelected).then(setExercises);\r\n        }\r\n    }, [categorySelected]);\r\n\r\n    useEffect(() => {\r\n        if(exerciseSelected){\r\n            getRMsExercise(exerciseSelected).then(({ days, rms }) => {\r\n                if(days.length && rms.length){\r\n                    setGraphData({x: days, y: rms});\r\n                }\r\n                else{\r\n                    setGraphData({ isEmpty: true });\r\n                }\r\n            });\r\n        }\r\n    }, [exerciseSelected]);\r\n\r\n    return (<>\r\n        <DropDown\r\n            value={optionSelected}\r\n            onChange={setOptionSelected}\r\n            options={statisticsOptions}\r\n            emptyStartMessage=\"Seleccione una opción\"\r\n        />\r\n        {optionSelected && <DropDown\r\n            value={categorySelected}\r\n            onChange={setCategorySelected}\r\n            options={categories}\r\n            emptyStartMessage=\"Seleccione una categoría\"\r\n        />}\r\n        {categorySelected && <DropDown\r\n            value={exerciseSelected}\r\n            onChange={setExerciseSelected}\r\n            options={exercises}\r\n            emptyStartMessage=\"Seleccione un ejercicio\"\r\n        />}\r\n        {graphData.isNotGenerated ?\r\n            <NoGraph>\r\n                No se ha generado ningún gráfico\r\n            </NoGraph>\r\n            :\r\n            graphData.isEmpty ?\r\n                <NoGraph>\r\n                    No hay datos disponibles para las opciones seleccionadas\r\n                </NoGraph>\r\n                :\r\n                <LineGraph x={graphData.x} y={graphData.y}/>\r\n        }\r\n    </>);\r\n}\r\n\r\nconst NoGraph = ({ children }) =>\r\n    <View style={statisticsStyles.noGraph}>\r\n        <Image\r\n            source={require(\"../../assets/no-graph.png\")}\r\n        />\r\n        <Text style={statisticsStyles.noGraphText}>{children}</Text>\r\n    </View>\r\n\r\nexport default Statistics;"],"mappings":"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"},"metadata":{},"sourceType":"module"}