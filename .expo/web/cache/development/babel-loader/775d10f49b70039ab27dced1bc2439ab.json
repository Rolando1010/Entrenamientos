{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this;\n\nimport { useEffect, useMemo, useState } from \"react\";\nimport Routes from \"./routes\";\nimport context from \"./utils/context\";\nimport useGlobalState from \"./hooks/useGlobalState\";\nimport loadInitialData from \"./services/initial-data\";\nimport { AdMobBanner, AdMobInterstitial, PublisherBanner, AdMobRewarded, setTestDeviceIDAsync } from 'expo-ads-admob';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nsetTestDeviceIDAsync('EMULATOR');\nloadInitialData();\n\nvar App = function App() {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      globalState = _useState2[0],\n      setGlobalState = _useState2[1];\n\n  var _useGlobalState = useGlobalState(),\n      startGlobalState = _useGlobalState.startGlobalState;\n\n  var valueGlobalState = useMemo(function () {\n    return {\n      globalState: globalState,\n      setGlobalState: setGlobalState\n    };\n  }, [globalState]);\n  useEffect(function () {\n    startGlobalState(setGlobalState);\n  }, []);\n  return _jsxs(context.Provider, {\n    value: valueGlobalState,\n    children: [_jsx(Routes, {}), _jsx(AdMobBanner, {\n      bannerSize: \"fullBanner\",\n      adUnitID: \"ca-app-pub-3940256099942544/6300978111\",\n      servePersonalizedAds: true,\n      onDidFailToReceiveAdWithError: _this.bannerError\n    })]\n  });\n};\n\nexport default App;","map":{"version":3,"names":["useEffect","useMemo","useState","Routes","context","useGlobalState","loadInitialData","AdMobBanner","AdMobInterstitial","PublisherBanner","AdMobRewarded","setTestDeviceIDAsync","App","globalState","setGlobalState","startGlobalState","valueGlobalState","bannerError"],"sources":["C:/Users/ROLANDO MORA/Documents/Proyectos/Entrenamientos/V2/src/index.jsx"],"sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\r\nimport Routes from \"./routes\";\r\nimport context from \"./utils/context\";\r\nimport useGlobalState from \"./hooks/useGlobalState\";\r\nimport loadInitialData from \"./services/initial-data\";\r\n\r\nimport {\r\n    AdMobBanner,\r\n    AdMobInterstitial,\r\n    PublisherBanner,\r\n    AdMobRewarded,\r\n    setTestDeviceIDAsync,\r\n  } from 'expo-ads-admob';\r\n\r\nsetTestDeviceIDAsync('EMULATOR');\r\n\r\nloadInitialData();\r\n\r\nconst App = () => {\r\n    const [globalState, setGlobalState] = useState({});\r\n    const { startGlobalState } = useGlobalState();\r\n    const valueGlobalState = useMemo(() => ({ globalState, setGlobalState }), [globalState]);\r\n\r\n    useEffect(() => {\r\n        startGlobalState(setGlobalState);\r\n    }, []);\r\n\r\n    return (\r\n        <context.Provider value={valueGlobalState}>\r\n            <Routes/>\r\n            <AdMobBanner\r\n                bannerSize=\"fullBanner\"\r\n                adUnitID=\"ca-app-pub-3940256099942544/6300978111\" // Test ID, Replace with your-admob-unit-id\r\n                servePersonalizedAds // true or false\r\n                onDidFailToReceiveAdWithError={this.bannerError}\r\n            />\r\n        </context.Provider>\r\n    );\r\n}\r\n\r\nexport default App;"],"mappings":";;;;AAAA,SAASA,SAAT,EAAoBC,OAApB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,OAAOC,MAAP;AACA,OAAOC,OAAP;AACA,OAAOC,cAAP;AACA,OAAOC,eAAP;AAEA,SACIC,WADJ,EAEIC,iBAFJ,EAGIC,eAHJ,EAIIC,aAJJ,EAKIC,oBALJ,QAMS,gBANT;;;AAQAA,oBAAoB,CAAC,UAAD,CAApB;AAEAL,eAAe;;AAEf,IAAMM,GAAG,GAAG,SAANA,GAAM,GAAM;EACd,gBAAsCV,QAAQ,CAAC,EAAD,CAA9C;EAAA;EAAA,IAAOW,WAAP;EAAA,IAAoBC,cAApB;;EACA,sBAA6BT,cAAc,EAA3C;EAAA,IAAQU,gBAAR,mBAAQA,gBAAR;;EACA,IAAMC,gBAAgB,GAAGf,OAAO,CAAC;IAAA,OAAO;MAAEY,WAAW,EAAXA,WAAF;MAAeC,cAAc,EAAdA;IAAf,CAAP;EAAA,CAAD,EAA0C,CAACD,WAAD,CAA1C,CAAhC;EAEAb,SAAS,CAAC,YAAM;IACZe,gBAAgB,CAACD,cAAD,CAAhB;EACH,CAFQ,EAEN,EAFM,CAAT;EAIA,OACI,MAAC,OAAD,CAAS,QAAT;IAAkB,KAAK,EAAEE,gBAAzB;IAAA,WACI,KAAC,MAAD,KADJ,EAEI,KAAC,WAAD;MACI,UAAU,EAAC,YADf;MAEI,QAAQ,EAAC,wCAFb;MAGI,oBAAoB,MAHxB;MAII,6BAA6B,EAAE,KAAI,CAACC;IAJxC,EAFJ;EAAA,EADJ;AAWH,CApBD;;AAsBA,eAAeL,GAAf"},"metadata":{},"sourceType":"module"}