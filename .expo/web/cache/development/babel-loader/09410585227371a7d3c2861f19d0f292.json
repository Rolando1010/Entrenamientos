{"ast":null,"code":"import binaryToBase64 from 'react-native/Libraries/Utilities/binaryToBase64';\nimport { promiseDefer } from \"./promise\";\nvar CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nexport function btoa(input) {\n  var map;\n  var i = 0;\n  var block = 0;\n  var output = '';\n\n  for (block = 0, i = 0, map = CHARS; input.charAt(i | 0) || (map = '=', i % 1); output += map.charAt(63 & block >> 8 - i % 1 * 8)) {\n    var charCode = input.charCodeAt(i += 3 / 4);\n\n    if (charCode > 0xff) {\n      throw new Error(\"'RNFirebase.Base64.btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n    }\n\n    block = block << 8 | charCode;\n  }\n\n  return output;\n}\nexport function atob(input) {\n  var i = 0;\n  var bc = 0;\n  var bs = 0;\n  var buffer;\n  var output = '';\n  var str = input.replace(/[=]+$/, '');\n\n  if (str.length % 4 === 1) {\n    throw new Error(\"'RNFirebase.Base64.atob' failed: The string to be decoded is not correctly encoded.\");\n  }\n\n  for (bc = 0, bs = 0, i = 0; buffer = str.charAt(i++); ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {\n    buffer = CHARS.indexOf(buffer);\n  }\n\n  return output;\n}\nexport function fromData(data) {\n  if (data instanceof Blob) {\n    var fileReader = new FileReader();\n\n    var _promiseDefer = promiseDefer(),\n        resolve = _promiseDefer.resolve,\n        reject = _promiseDefer.reject,\n        promise = _promiseDefer.promise;\n\n    fileReader.readAsDataURL(data);\n\n    fileReader.onloadend = function onloadend() {\n      resolve({\n        string: fileReader.result,\n        format: 'data_url'\n      });\n    };\n\n    fileReader.onerror = function onerror(event) {\n      fileReader.abort();\n      reject(event);\n    };\n\n    return promise;\n  }\n\n  if (data instanceof ArrayBuffer || data instanceof Uint8Array) {\n    return Promise.resolve({\n      string: binaryToBase64(data),\n      format: 'base64'\n    });\n  }\n\n  throw new Error(\"'RNFirebase.Base64.fromData' failed: Unknown data type.\");\n}","map":{"version":3,"mappings":"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","names":["binaryToBase64","promiseDefer","CHARS","btoa","input","map","i","block","output","charAt","charCode","charCodeAt","Error","atob","bc","bs","buffer","str","replace","length","String","fromCharCode","indexOf","fromData","data","Blob","fileReader","FileReader","resolve","reject","promise","readAsDataURL","onloadend","string","result","format","onerror","event","abort","ArrayBuffer","Uint8Array","Promise"],"sources":["Base64.ts"],"sourcesContent":["/* eslint-disable no-bitwise */\n/* global Blob, FileReader */\n/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport binaryToBase64 from 'react-native/Libraries/Utilities/binaryToBase64';\nimport { promiseDefer } from './promise';\n\nconst CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n/**\n * window.btoa\n */\nexport function btoa(input: string) {\n  let map;\n  let i = 0;\n  let block = 0;\n  let output = '';\n\n  for (\n    block = 0, i = 0, map = CHARS;\n    input.charAt(i | 0) || ((map = '='), i % 1);\n    output += map.charAt(63 & (block >> (8 - (i % 1) * 8)))\n  ) {\n    const charCode = input.charCodeAt((i += 3 / 4));\n\n    if (charCode > 0xff) {\n      throw new Error(\n        \"'RNFirebase.Base64.btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\",\n      );\n    }\n\n    block = (block << 8) | charCode;\n  }\n\n  return output;\n}\n\n/**\n * window.atob\n */\nexport function atob(input: string) {\n  let i = 0;\n  let bc = 0;\n  let bs = 0;\n  let buffer;\n  let output = '';\n\n  const str = input.replace(/[=]+$/, '');\n\n  if (str.length % 4 === 1) {\n    throw new Error(\n      \"'RNFirebase.Base64.atob' failed: The string to be decoded is not correctly encoded.\",\n    );\n  }\n\n  for (\n    bc = 0, bs = 0, i = 0;\n    (buffer = str.charAt(i++));\n    ~buffer && ((bs = bc % 4 ? bs * 64 + buffer : buffer), bc++ % 4)\n      ? (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6))))\n      : 0\n  ) {\n    buffer = CHARS.indexOf(buffer);\n  }\n\n  return output;\n}\n\n/**\n * Converts a Blob, ArrayBuffer or Uint8Array to a base64 string.\n */\nexport function fromData(data: Blob | ArrayBuffer | Uint8Array) {\n  if (data instanceof Blob) {\n    const fileReader = new FileReader();\n    const { resolve, reject, promise } = promiseDefer();\n\n    fileReader.readAsDataURL(data);\n\n    fileReader.onloadend = function onloadend() {\n      resolve({ string: fileReader.result, format: 'data_url' });\n    };\n\n    fileReader.onerror = function onerror(event) {\n      fileReader.abort();\n      reject(event);\n    };\n\n    return promise;\n  }\n\n  if (data instanceof ArrayBuffer || data instanceof Uint8Array) {\n    return Promise.resolve({\n      string: binaryToBase64(data),\n      format: 'base64',\n    });\n  }\n\n  throw new Error(\"'RNFirebase.Base64.fromData' failed: Unknown data type.\");\n}\n"]},"metadata":{},"sourceType":"module"}