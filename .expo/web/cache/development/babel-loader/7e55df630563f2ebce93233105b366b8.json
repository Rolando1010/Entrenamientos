{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { useEffect, useState } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport DropDown from \"../components/drop-down\";\nimport { LineGraph } from \"../components/graphs\";\nimport { getCategories, getExercisesCategory } from \"../services/categories\";\nimport { getMaxRepsExercise, getMaxWeightsExercise, getRMsExercise } from \"../services/exercises\";\nimport { statisticsStyles } from \"../styles/pages\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar statisticsOptions = [\"1RM Estimado\", \"Máximo peso\", \"Máximas repeticiones\"];\nvar statisticsFunctions = {\n  \"1RM Estimado\": function () {\n    var _RMEstimado = _asyncToGenerator(function* (exercise) {\n      var _yield$getRMsExercise = yield getRMsExercise(exercise),\n          days = _yield$getRMsExercise.days,\n          rms = _yield$getRMsExercise.rms;\n\n      return {\n        x: days,\n        y: rms,\n        ySuffix: \"kgs\"\n      };\n    });\n\n    function RMEstimado(_x) {\n      return _RMEstimado.apply(this, arguments);\n    }\n\n    return RMEstimado;\n  }(),\n  \"Máximo peso\": function () {\n    var _MáximoPeso = _asyncToGenerator(function* (exercise) {\n      var _yield$getMaxWeightsE = yield getMaxWeightsExercise(exercise),\n          days = _yield$getMaxWeightsE.days,\n          weights = _yield$getMaxWeightsE.weights;\n\n      return {\n        x: days,\n        y: weights,\n        ySuffix: \"kgs\"\n      };\n    });\n\n    function MáximoPeso(_x2) {\n      return _MáximoPeso.apply(this, arguments);\n    }\n\n    return MáximoPeso;\n  }(),\n  \"Máximas repeticiones\": function () {\n    var _MáximasRepeticiones = _asyncToGenerator(function* (exercise) {\n      var _yield$getMaxRepsExer = yield getMaxRepsExercise(exercise),\n          days = _yield$getMaxRepsExer.days,\n          reps = _yield$getMaxRepsExer.reps;\n\n      return {\n        x: days,\n        y: reps,\n        ySuffix: \"reps\"\n      };\n    });\n\n    function MáximasRepeticiones(_x3) {\n      return _MáximasRepeticiones.apply(this, arguments);\n    }\n\n    return MáximasRepeticiones;\n  }()\n};\n\nvar Statistics = function Statistics() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      optionSelected = _useState2[0],\n      setOptionSelected = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      categories = _useState4[0],\n      setCategories = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      categorySelected = _useState6[0],\n      setCategorySelected = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      exercises = _useState8[0],\n      setExercises = _useState8[1];\n\n  var _useState9 = useState(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      exerciseSelected = _useState10[0],\n      setExerciseSelected = _useState10[1];\n\n  var _useState11 = useState({\n    isNotGenerated: true\n  }),\n      _useState12 = _slicedToArray(_useState11, 2),\n      graphData = _useState12[0],\n      setGraphData = _useState12[1];\n\n  useEffect(function () {\n    getCategories().then(setCategories);\n  }, []);\n  useEffect(function () {\n    if (categorySelected) {\n      getExercisesCategory(categorySelected).then(setExercises);\n    }\n  }, [categorySelected]);\n  useEffect(function () {\n    if (exerciseSelected) {\n      statisticsFunctions[optionSelected](exerciseSelected).then(function (_ref) {\n        var x = _ref.x,\n            y = _ref.y,\n            ySuffix = _ref.ySuffix;\n\n        if (x.length && y.length) {\n          setGraphData({\n            x: x,\n            y: y,\n            ySuffix: ySuffix\n          });\n        } else {\n          setGraphData({\n            isEmpty: true\n          });\n        }\n      });\n    }\n  }, [optionSelected, exerciseSelected]);\n  return _jsxs(_Fragment, {\n    children: [_jsx(DropDown, {\n      value: optionSelected,\n      onChange: setOptionSelected,\n      options: statisticsOptions,\n      emptyStartMessage: \"Seleccione una opci\\xF3n\"\n    }), optionSelected && _jsx(DropDown, {\n      value: categorySelected,\n      onChange: setCategorySelected,\n      options: categories,\n      emptyStartMessage: \"Seleccione una categor\\xEDa\"\n    }), categorySelected && _jsx(DropDown, {\n      value: exerciseSelected,\n      onChange: setExerciseSelected,\n      options: exercises,\n      emptyStartMessage: \"Seleccione un ejercicio\"\n    }), graphData.isNotGenerated ? _jsx(NoGraph, {\n      children: \"No se ha generado ning\\xFAn gr\\xE1fico\"\n    }) : graphData.isEmpty ? _jsx(NoGraph, {\n      children: \"No hay datos disponibles para las opciones seleccionadas\"\n    }) : _jsxs(_Fragment, {\n      children: [_jsxs(Text, {\n        style: statisticsStyles.noGraphText,\n        children: [optionSelected, \" de \", exerciseSelected]\n      }), _jsx(LineGraph, {\n        x: graphData.x,\n        y: graphData.y,\n        ySuffix: graphData.ySuffix\n      })]\n    })]\n  });\n};\n\nvar NoGraph = function NoGraph(_ref2) {\n  var children = _ref2.children;\n  return _jsxs(View, {\n    style: statisticsStyles.noGraph,\n    children: [_jsx(Image, {\n      style: statisticsStyles.noGraphImage,\n      source: require(\"../../assets/no-graph.png\")\n    }), _jsx(Text, {\n      style: statisticsStyles.noGraphText,\n      children: children\n    })]\n  });\n};\n\nexport default Statistics;","map":{"version":3,"names":["useEffect","useState","DropDown","LineGraph","getCategories","getExercisesCategory","getMaxRepsExercise","getMaxWeightsExercise","getRMsExercise","statisticsStyles","statisticsOptions","statisticsFunctions","exercise","days","rms","x","y","ySuffix","weights","reps","Statistics","optionSelected","setOptionSelected","categories","setCategories","categorySelected","setCategorySelected","exercises","setExercises","exerciseSelected","setExerciseSelected","isNotGenerated","graphData","setGraphData","then","length","isEmpty","noGraphText","NoGraph","children","noGraph","noGraphImage","require"],"sources":["C:/Users/ROLANDO MORA/Documents/Proyectos/Entrenamientos/V2/src/screens/statistics.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { Text, Image, View } from \"react-native\";\r\nimport DropDown from \"../components/drop-down\";\r\nimport { LineGraph } from \"../components/graphs\";\r\nimport { getCategories, getExercisesCategory } from \"../services/categories\";\r\nimport { getMaxRepsExercise, getMaxWeightsExercise, getRMsExercise } from \"../services/exercises\";\r\nimport { statisticsStyles } from \"../styles/pages\";\r\n\r\nconst statisticsOptions = [\r\n    \"1RM Estimado\",\r\n    \"Máximo peso\",\r\n    \"Máximas repeticiones\"\r\n];\r\n\r\nconst statisticsFunctions = {\r\n    \"1RM Estimado\": async (exercise) => {\r\n        const { days, rms } = await getRMsExercise(exercise);\r\n        return {x: days, y: rms, ySuffix: \"kgs\"};\r\n    },\r\n    \"Máximo peso\": async (exercise) => {\r\n        const { days, weights } = await getMaxWeightsExercise(exercise);\r\n        return {x: days, y: weights, ySuffix: \"kgs\"};\r\n    },\r\n    \"Máximas repeticiones\": async (exercise) => {\r\n        const { days, reps } = await getMaxRepsExercise(exercise);\r\n        return {x: days, y: reps, ySuffix: \"reps\"};\r\n    }\r\n};\r\n\r\nconst Statistics = () => {\r\n    const [optionSelected, setOptionSelected] = useState();\r\n    const [categories, setCategories] = useState([]);\r\n    const [categorySelected, setCategorySelected] = useState();\r\n    const [exercises, setExercises] = useState([]);\r\n    const [exerciseSelected, setExerciseSelected] = useState();\r\n    const [graphData, setGraphData] = useState({ isNotGenerated: true });\r\n\r\n    useEffect(() => {\r\n        getCategories().then(setCategories);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if(categorySelected){\r\n            getExercisesCategory(categorySelected).then(setExercises);\r\n        }\r\n    }, [categorySelected]);\r\n\r\n    useEffect(() => {\r\n        if(exerciseSelected){\r\n            statisticsFunctions[optionSelected](exerciseSelected).then(({ x, y, ySuffix }) => {\r\n                if(x.length && y.length){\r\n                    setGraphData({x, y, ySuffix});\r\n                }\r\n                else{\r\n                    setGraphData({ isEmpty: true });\r\n                }\r\n            });\r\n        }\r\n    }, [optionSelected, exerciseSelected]);\r\n\r\n    return (<>\r\n        <DropDown\r\n            value={optionSelected}\r\n            onChange={setOptionSelected}\r\n            options={statisticsOptions}\r\n            emptyStartMessage=\"Seleccione una opción\"\r\n        />\r\n        {optionSelected && <DropDown\r\n            value={categorySelected}\r\n            onChange={setCategorySelected}\r\n            options={categories}\r\n            emptyStartMessage=\"Seleccione una categoría\"\r\n        />}\r\n        {categorySelected && <DropDown\r\n            value={exerciseSelected}\r\n            onChange={setExerciseSelected}\r\n            options={exercises}\r\n            emptyStartMessage=\"Seleccione un ejercicio\"\r\n        />}\r\n        {graphData.isNotGenerated ?\r\n            <NoGraph>\r\n                No se ha generado ningún gráfico\r\n            </NoGraph>\r\n            :\r\n            graphData.isEmpty ?\r\n                <NoGraph>\r\n                    No hay datos disponibles para las opciones seleccionadas\r\n                </NoGraph>\r\n                :\r\n                <>\r\n                    <Text style={statisticsStyles.noGraphText}>{optionSelected} de {exerciseSelected}</Text>\r\n                    <LineGraph\r\n                        x={graphData.x}\r\n                        y={graphData.y}\r\n                        ySuffix={graphData.ySuffix}\r\n                    />\r\n                </>\r\n        }\r\n    </>);\r\n}\r\n\r\nconst NoGraph = ({ children }) =>\r\n    <View style={statisticsStyles.noGraph}>\r\n        <Image\r\n            style={statisticsStyles.noGraphImage}\r\n            source={require(\"../../assets/no-graph.png\")}\r\n        />\r\n        <Text style={statisticsStyles.noGraphText}>{children}</Text>\r\n    </View>\r\n\r\nexport default Statistics;"],"mappings":"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"},"metadata":{},"sourceType":"module"}