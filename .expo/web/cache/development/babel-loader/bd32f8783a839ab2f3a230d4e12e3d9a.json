{"ast":null,"code":"export function pathParent(path) {\n  if (path.length === 0) {\n    return null;\n  }\n\n  var index = path.lastIndexOf('/');\n\n  if (index <= 0) {\n    return null;\n  }\n\n  return path.slice(0, index);\n}\nexport function pathChild(path, childPath) {\n  var canonicalChildPath = pathPieces(childPath).join('/');\n\n  if (path.length === 0) {\n    return canonicalChildPath;\n  }\n\n  return path + \"/\" + canonicalChildPath;\n}\nexport function pathLastComponent(path) {\n  var index = path.lastIndexOf('/', path.length - 2);\n\n  if (index === -1) {\n    return path;\n  }\n\n  return path.slice(index + 1);\n}\nexport function pathPieces(path) {\n  return path.split('/').filter(function ($) {\n    return $.length > 0;\n  });\n}\nexport function pathIsEmpty(path) {\n  return !pathPieces(path).length;\n}\nexport function pathToUrlEncodedString(path) {\n  var pieces = pathPieces(path);\n  var pathString = '';\n\n  for (var i = 0; i < pieces.length; i++) {\n    pathString += \"/\" + encodeURIComponent(String(pieces[i]));\n  }\n\n  return pathString || '/';\n}\nexport var INVALID_PATH_REGEX = /[[\\].#$\\u0000-\\u001F\\u007F]/;\nexport function isValidPath(path) {\n  return typeof path === 'string' && path.length !== 0 && !INVALID_PATH_REGEX.test(path);\n}\nexport function toFilePath(path) {\n  var _filePath = path.replace('file://', '');\n\n  if (_filePath.includes('%')) {\n    _filePath = decodeURIComponent(_filePath);\n  }\n\n  return _filePath;\n}","map":{"version":3,"mappings":"AAoBA,OAAO,SAASA,UAAT,CAAoBC,IAApB,EAAkC;EACvC,IAAIA,IAAI,CAACC,MAALD,KAAgB,CAApB,EAAuB;IACrB,OAAO,IAAP;EACF;;EAEA,IAAME,KAAK,GAAGF,IAAI,CAACG,WAALH,CAAiB,GAAjBA,CAAd;;EACA,IAAIE,KAAK,IAAI,CAAb,EAAgB;IACd,OAAO,IAAP;EACF;;EAEA,OAAOF,IAAI,CAACI,KAALJ,CAAW,CAAXA,EAAcE,KAAdF,CAAP;AACF;AAKA,OAAO,SAASK,SAAT,CAAmBL,IAAnB,EAAiCM,SAAjC,EAAoD;EACzD,IAAMC,kBAAkB,GAAGC,UAAU,CAACF,SAAD,CAAVE,CAAsBC,IAAtBD,CAA2B,GAA3BA,CAA3B;;EAEA,IAAIR,IAAI,CAACC,MAALD,KAAgB,CAApB,EAAuB;IACrB,OAAOO,kBAAP;EACF;;EAEA,OAAUP,IAAV,SAAkBO,kBAAlB;AACF;AAKA,OAAO,SAASG,iBAAT,CAA2BV,IAA3B,EAAyC;EAC9C,IAAME,KAAK,GAAGF,IAAI,CAACG,WAALH,CAAiB,GAAjBA,EAAsBA,IAAI,CAACC,MAALD,GAAc,CAApCA,CAAd;;EACA,IAAIE,KAAK,KAAK,CAAC,CAAf,EAAkB;IAChB,OAAOF,IAAP;EACF;;EAEA,OAAOA,IAAI,CAACI,KAALJ,CAAWE,KAAK,GAAG,CAAnBF,CAAP;AACF;AAOA,OAAO,SAASQ,UAAT,CAAoBR,IAApB,EAAkC;EACvC,OAAOA,IAAI,CAACW,KAALX,CAAW,GAAXA,EAAgBY,MAAhBZ,CAAuBa,WAAC;IAAA,OAAIA,CAAC,CAACZ,MAAFY,GAAW,CAAf;EAAA,CAAxBb,CAAP;AACF;AAOA,OAAO,SAASc,WAAT,CAAqBd,IAArB,EAAmC;EACxC,OAAO,CAACQ,UAAU,CAACR,IAAD,CAAVQ,CAAiBP,MAAzB;AACF;AAOA,OAAO,SAASc,sBAAT,CAAgCf,IAAhC,EAA8C;EACnD,IAAMgB,MAAM,GAAGR,UAAU,CAACR,IAAD,CAAzB;EACA,IAAIiB,UAAU,GAAG,EAAjB;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACf,MAA3B,EAAmCiB,CAAC,EAApC,EAAwC;IACtCD,UAAU,UAAQE,kBAAkB,CAACC,MAAM,CAACJ,MAAM,CAACE,CAAD,CAAP,CAAP,CAApCD;EACF;;EACA,OAAOA,UAAU,IAAI,GAArB;AACF;AAGA,OAAO,IAAMI,kBAAkB,GAAG,6BAA3B;AAOP,OAAO,SAASC,WAAT,CAAqBtB,IAArB,EAAoC;EACzC,OAAO,OAAOA,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,CAACC,MAALD,KAAgB,CAA5C,IAAiD,CAACqB,kBAAkB,CAACE,IAAnBF,CAAwBrB,IAAxBqB,CAAzD;AACF;AAOA,OAAO,SAASG,UAAT,CAAoBxB,IAApB,EAAkC;EACvC,IAAIyB,SAAS,GAAGzB,IAAI,CAAC0B,OAAL1B,CAAa,SAAbA,EAAwB,EAAxBA,CAAhB;;EACA,IAAIyB,SAAS,CAACE,QAAVF,CAAmB,GAAnBA,CAAJ,EAA6B;IAC3BA,SAAS,GAAGG,kBAAkB,CAACH,SAAD,CAA9BA;EACF;;EACA,OAAOA,SAAP;AACF","names":["pathParent","path","length","index","lastIndexOf","slice","pathChild","childPath","canonicalChildPath","pathPieces","join","pathLastComponent","split","filter","$","pathIsEmpty","pathToUrlEncodedString","pieces","pathString","i","encodeURIComponent","String","INVALID_PATH_REGEX","isValidPath","test","toFilePath","_filePath","replace","includes","decodeURIComponent"],"sources":["path.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n/**\n * Returns the next parent of the path e.g. /foo/bar/car -> /foo/bar\n */\nexport function pathParent(path: string) {\n  if (path.length === 0) {\n    return null;\n  }\n\n  const index = path.lastIndexOf('/');\n  if (index <= 0) {\n    return null;\n  }\n\n  return path.slice(0, index);\n}\n\n/**\n * Joins a parent and a child path\n */\nexport function pathChild(path: string, childPath: string) {\n  const canonicalChildPath = pathPieces(childPath).join('/');\n\n  if (path.length === 0) {\n    return canonicalChildPath;\n  }\n\n  return `${path}/${canonicalChildPath}`;\n}\n\n/**\n * Returns the last component of a path, e.g /foo/bar.jpeg -> bar.jpeg\n */\nexport function pathLastComponent(path: string) {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  }\n\n  return path.slice(index + 1);\n}\n\n/**\n * Returns all none empty pieces of the path\n * @param path\n * @returns {*}\n */\nexport function pathPieces(path: string) {\n  return path.split('/').filter($ => $.length > 0);\n}\n\n/**\n * Returns whether a given path is empty\n * @param path\n * @returns {boolean}\n */\nexport function pathIsEmpty(path: string) {\n  return !pathPieces(path).length;\n}\n\n/**\n * Converts a given path to a URL encoded string\n * @param path\n * @returns {string|string}\n */\nexport function pathToUrlEncodedString(path: string) {\n  const pieces = pathPieces(path);\n  let pathString = '';\n  for (let i = 0; i < pieces.length; i++) {\n    pathString += `/${encodeURIComponent(String(pieces[i]))}`;\n  }\n  return pathString || '/';\n}\n\n// eslint-disable-next-line no-control-regex\nexport const INVALID_PATH_REGEX = /[[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Ensures a given path is a valid Firebase path\n * @param path\n * @returns {boolean}\n */\nexport function isValidPath(path: unknown) {\n  return typeof path === 'string' && path.length !== 0 && !INVALID_PATH_REGEX.test(path);\n}\n\n/**\n * Converts a file path to a standardized string path\n * @param path\n * @returns {*}\n */\nexport function toFilePath(path: string) {\n  let _filePath = path.replace('file://', '');\n  if (_filePath.includes('%')) {\n    _filePath = decodeURIComponent(_filePath);\n  }\n  return _filePath;\n}\n"]},"metadata":{},"sourceType":"module"}