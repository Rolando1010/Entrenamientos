{"ast":null,"code":"import storage from \"../utils/storage\";\nimport { formatDate } from \"../utils/date\";\n\nvar getExercises = function getExercises(date) {\n  return new Promise(function (resolve) {\n    var key = formatDate(date);\n    storage.get(key).then(resolve);\n  });\n};\n\nvar saveExercise = function saveExercise(date, exercise, weight, reps) {\n  return new Promise(function (resolve) {\n    var key = formatDate(date);\n    storage.get(key).then(function (data) {\n      var newExerciseInfo = {\n        name: exercise,\n        series: [{\n          weight: weight,\n          reps: reps\n        }]\n      };\n\n      if (data) {\n        var currentExercise = data.find(function (e) {\n          return e.name === exercise;\n        });\n        if (currentExercise) currentExercise.series.push({\n          weight: weight,\n          reps: reps\n        });else data.push(newExerciseInfo);\n        storage.set(key, data).then(resolve);\n        return;\n      }\n\n      storage.set(key, [newExerciseInfo]).then(resolve);\n    });\n  });\n};\n\nvar removeExercise = function removeExercise(date, exercise) {\n  return new Promise(function (resolve) {\n    var key = formatDate(date);\n    storage.get(key).then(function (data) {\n      var remainingExercises = data.filter(function (e) {\n        return e.name !== exercise;\n      });\n      storage.set(key, remainingExercises).then(resolve);\n    });\n  });\n};\n\nvar removeSerie = function removeSerie(date, exercise, serieIndex) {\n  return new Promise(function (resolve) {\n    var key = formatDate(date);\n    storage.get(key).then(function (data) {\n      storage.set(key, data.map(function (e) {\n        if (e.name === exercise) {\n          e.series = e.series.filter(function (s, index) {\n            return index === serieIndex;\n          });\n        }\n\n        return e;\n      })).then(resolve);\n    });\n  });\n};\n\nexport { getExercises, saveExercise, removeExercise, removeSerie };","map":{"version":3,"names":["storage","formatDate","getExercises","date","Promise","resolve","key","get","then","saveExercise","exercise","weight","reps","data","newExerciseInfo","name","series","currentExercise","find","e","push","set","removeExercise","remainingExercises","filter","removeSerie","serieIndex","map","s","index"],"sources":["C:/Users/ROLANDO MORA/Documents/Proyectos/Entrenamientos/V2/src/services/day-workout.js"],"sourcesContent":["import storage from \"../utils/storage\";\r\nimport { formatDate } from \"../utils/date\";\r\n\r\nconst getExercises = (date) => new Promise(resolve => {\r\n    const key = formatDate(date);\r\n    storage.get(key).then(resolve);\r\n});\r\n\r\nconst saveExercise = (date, exercise, weight, reps) => new Promise(resolve => {\r\n    const key = formatDate(date);\r\n    storage.get(key).then(data => {\r\n        const newExerciseInfo = {name: exercise, series: [{weight, reps}]};\r\n        if(data){\r\n            const currentExercise = data.find(e => e.name === exercise);\r\n            if(currentExercise)currentExercise.series.push({weight, reps});\r\n            else data.push(newExerciseInfo);\r\n            storage.set(key, data).then(resolve);\r\n            return;\r\n        }\r\n        storage.set(key, [newExerciseInfo]).then(resolve);\r\n    });\r\n});\r\n\r\nconst removeExercise = (date, exercise) => new Promise(resolve => {\r\n    const key = formatDate(date);\r\n    storage.get(key).then(data => {\r\n        const remainingExercises = data.filter(e => e.name !== exercise);\r\n        storage.set(key, remainingExercises).then(resolve);\r\n    });\r\n});\r\n\r\nconst removeSerie = (date, exercise, serieIndex) => new Promise(resolve => {\r\n    const key = formatDate(date);\r\n    storage.get(key).then(data => {\r\n        storage.set(key, data.map(e => {\r\n            if(e.name === exercise){\r\n                e.series = e.series.filter((s, index) => index === serieIndex);\r\n            }\r\n            return e;\r\n        })).then(resolve);\r\n    });\r\n});\r\n\r\nexport {\r\n    getExercises,\r\n    saveExercise,\r\n    removeExercise,\r\n    removeSerie\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}