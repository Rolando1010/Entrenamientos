{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { TCModel, TCString } from '@iabtcf/core';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { AdsConsentDebugGeography } from \"./AdsConsentDebugGeography\";\nimport { AdsConsentPurposes } from \"./AdsConsentPurposes\";\nimport { AdsConsentSpecialFeatures } from \"./AdsConsentSpecialFeatures\";\nimport { isPropertySet, isArray, isBoolean, isObject, isString } from \"./common\";\nvar native = NativeModules.RNGoogleMobileAdsConsentModule;\nexport var AdsConsent = {\n  requestInfoUpdate: function requestInfoUpdate() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!isObject(options)) {\n      throw new Error(\"AdsConsent.requestInfoUpdate(*) 'options' expected an object value.\");\n    }\n\n    if (isPropertySet(options, 'debugGeography') && options.debugGeography !== AdsConsentDebugGeography.DISABLED && options.debugGeography !== AdsConsentDebugGeography.EEA && options.debugGeography !== AdsConsentDebugGeography.NOT_EEA) {\n      throw new Error(\"AdsConsent.requestInfoUpdate(*) 'options.debugGeography' expected one of AdsConsentDebugGeography.DISABLED, AdsConsentDebugGeography.EEA or AdsConsentDebugGeography.NOT_EEA.\");\n    }\n\n    if (isPropertySet(options, 'tagForUnderAgeOfConsent') && !isBoolean(options.tagForUnderAgeOfConsent)) {\n      throw new Error(\"AdsConsent.requestInfoUpdate(*) 'options.tagForUnderAgeOfConsent' expected a boolean value.\");\n    }\n\n    if (isPropertySet(options, 'testDeviceIdentifiers')) {\n      if (!isArray(options.testDeviceIdentifiers)) {\n        throw new Error(\"AdsConsent.requestInfoUpdate(*) 'options.testDeviceIdentifiers' expected an array of string values.\");\n      }\n\n      for (var deviceId of (_options$testDeviceId = options.testDeviceIdentifiers) != null ? _options$testDeviceId : []) {\n        var _options$testDeviceId;\n\n        if (!isString(deviceId)) {\n          throw new Error(\"AdsConsent.requestInfoUpdate(*) 'options.testDeviceIdentifiers' expected an array of string values.\");\n        }\n      }\n    }\n\n    return native.requestInfoUpdate(options);\n  },\n  showForm: function showForm() {\n    return native.showForm();\n  },\n  reset: function reset() {\n    return native.reset();\n  },\n  getTCString: function getTCString() {\n    return native.getTCString();\n  },\n  getTCModel: function () {\n    var _getTCModel = _asyncToGenerator(function* () {\n      var tcString = yield native.getTCString();\n      return TCString.decode(tcString);\n    });\n\n    function getTCModel() {\n      return _getTCModel.apply(this, arguments);\n    }\n\n    return getTCModel;\n  }(),\n  getUserChoices: function () {\n    var _getUserChoices = _asyncToGenerator(function* () {\n      var tcString = yield native.getTCString();\n      var tcModel;\n\n      try {\n        tcModel = TCString.decode(tcString);\n      } catch (e) {\n        tcModel = new TCModel();\n\n        if (__DEV__) {\n          console.warn(\"Failed to decode tcString \" + tcString + \":\", e);\n        }\n      }\n\n      return {\n        activelyScanDeviceCharacteristicsForIdentification: tcModel.specialFeatureOptins.has(AdsConsentSpecialFeatures.ACTIVELY_SCAN_DEVICE_CHARACTERISTICS_FOR_IDENTIFICATION),\n        applyMarketResearchToGenerateAudienceInsights: tcModel.purposeConsents.has(AdsConsentPurposes.APPLY_MARKET_RESEARCH_TO_GENERATE_AUDIENCE_INSIGHTS),\n        createAPersonalisedAdsProfile: tcModel.purposeConsents.has(AdsConsentPurposes.CREATE_A_PERSONALISED_ADS_PROFILE),\n        createAPersonalisedContentProfile: tcModel.purposeConsents.has(AdsConsentPurposes.CREATE_A_PERSONALISED_ADS_PROFILE),\n        developAndImproveProducts: tcModel.purposeConsents.has(AdsConsentPurposes.DEVELOP_AND_IMPROVE_PRODUCTS),\n        measureAdPerformance: tcModel.purposeConsents.has(AdsConsentPurposes.MEASURE_AD_PERFORMANCE),\n        measureContentPerformance: tcModel.purposeConsents.has(AdsConsentPurposes.MEASURE_CONTENT_PERFORMANCE),\n        selectBasicAds: tcModel.purposeConsents.has(AdsConsentPurposes.SELECT_BASIC_ADS),\n        selectPersonalisedAds: tcModel.purposeConsents.has(AdsConsentPurposes.SELECT_PERSONALISED_ADS),\n        selectPersonalisedContent: tcModel.purposeConsents.has(AdsConsentPurposes.SELECT_PERSONALISED_CONTENT),\n        storeAndAccessInformationOnDevice: tcModel.purposeConsents.has(AdsConsentPurposes.STORE_AND_ACCESS_INFORMATION_ON_DEVICE),\n        usePreciseGeolocationData: tcModel.specialFeatureOptins.has(AdsConsentSpecialFeatures.USE_PRECISE_GEOLOCATION_DATA)\n      };\n    });\n\n    function getUserChoices() {\n      return _getUserChoices.apply(this, arguments);\n    }\n\n    return getUserChoices;\n  }()\n};","map":{"version":3,"mappings":"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","names":["TCModel","TCString","AdsConsentDebugGeography","AdsConsentPurposes","AdsConsentSpecialFeatures","isPropertySet","isArray","isBoolean","isObject","isString","native","NativeModules","RNGoogleMobileAdsConsentModule","AdsConsent","requestInfoUpdate","options","Error","debugGeography","DISABLED","EEA","NOT_EEA","tagForUnderAgeOfConsent","testDeviceIdentifiers","deviceId","showForm","reset","getTCString","getTCModel","tcString","decode","getUserChoices","tcModel","e","__DEV__","console","warn","activelyScanDeviceCharacteristicsForIdentification","specialFeatureOptins","has","ACTIVELY_SCAN_DEVICE_CHARACTERISTICS_FOR_IDENTIFICATION","applyMarketResearchToGenerateAudienceInsights","purposeConsents","APPLY_MARKET_RESEARCH_TO_GENERATE_AUDIENCE_INSIGHTS","createAPersonalisedAdsProfile","CREATE_A_PERSONALISED_ADS_PROFILE","createAPersonalisedContentProfile","developAndImproveProducts","DEVELOP_AND_IMPROVE_PRODUCTS","measureAdPerformance","MEASURE_AD_PERFORMANCE","measureContentPerformance","MEASURE_CONTENT_PERFORMANCE","selectBasicAds","SELECT_BASIC_ADS","selectPersonalisedAds","SELECT_PERSONALISED_ADS","selectPersonalisedContent","SELECT_PERSONALISED_CONTENT","storeAndAccessInformationOnDevice","STORE_AND_ACCESS_INFORMATION_ON_DEVICE","usePreciseGeolocationData","USE_PRECISE_GEOLOCATION_DATA"],"sources":["AdsConsent.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { TCModel, TCString } from '@iabtcf/core';\nimport { NativeModules } from 'react-native';\nimport { AdsConsentDebugGeography } from './AdsConsentDebugGeography';\nimport { AdsConsentPurposes } from './AdsConsentPurposes';\nimport { AdsConsentSpecialFeatures } from './AdsConsentSpecialFeatures';\nimport { isPropertySet, isArray, isBoolean, isObject, isString } from './common';\nimport {\n  AdsConsentFormResult,\n  AdsConsentInfo,\n  AdsConsentInfoOptions,\n  AdsConsentInterface,\n  AdsConsentUserChoices,\n} from './types/AdsConsent.interface';\n\nconst native = NativeModules.RNGoogleMobileAdsConsentModule;\n\nexport const AdsConsent: AdsConsentInterface = {\n  requestInfoUpdate(options: AdsConsentInfoOptions = {}): Promise<AdsConsentInfo> {\n    if (!isObject(options)) {\n      throw new Error(\"AdsConsent.requestInfoUpdate(*) 'options' expected an object value.\");\n    }\n\n    if (\n      isPropertySet(options, 'debugGeography') &&\n      options.debugGeography !== AdsConsentDebugGeography.DISABLED &&\n      options.debugGeography !== AdsConsentDebugGeography.EEA &&\n      options.debugGeography !== AdsConsentDebugGeography.NOT_EEA\n    ) {\n      throw new Error(\n        \"AdsConsent.requestInfoUpdate(*) 'options.debugGeography' expected one of AdsConsentDebugGeography.DISABLED, AdsConsentDebugGeography.EEA or AdsConsentDebugGeography.NOT_EEA.\",\n      );\n    }\n\n    if (\n      isPropertySet(options, 'tagForUnderAgeOfConsent') &&\n      !isBoolean(options.tagForUnderAgeOfConsent)\n    ) {\n      throw new Error(\n        \"AdsConsent.requestInfoUpdate(*) 'options.tagForUnderAgeOfConsent' expected a boolean value.\",\n      );\n    }\n\n    if (isPropertySet(options, 'testDeviceIdentifiers')) {\n      if (!isArray(options.testDeviceIdentifiers)) {\n        throw new Error(\n          \"AdsConsent.requestInfoUpdate(*) 'options.testDeviceIdentifiers' expected an array of string values.\",\n        );\n      }\n\n      for (const deviceId of options.testDeviceIdentifiers ?? []) {\n        if (!isString(deviceId)) {\n          throw new Error(\n            \"AdsConsent.requestInfoUpdate(*) 'options.testDeviceIdentifiers' expected an array of string values.\",\n          );\n        }\n      }\n    }\n\n    return native.requestInfoUpdate(options);\n  },\n\n  showForm(): Promise<AdsConsentFormResult> {\n    return native.showForm();\n  },\n\n  reset(): void {\n    return native.reset();\n  },\n\n  getTCString(): Promise<string> {\n    return native.getTCString();\n  },\n\n  async getTCModel(): Promise<TCModel> {\n    const tcString = await native.getTCString();\n    return TCString.decode(tcString);\n  },\n\n  async getUserChoices(): Promise<AdsConsentUserChoices> {\n    const tcString = await native.getTCString();\n\n    let tcModel: TCModel;\n\n    try {\n      tcModel = TCString.decode(tcString);\n    } catch (e) {\n      tcModel = new TCModel();\n\n      if (__DEV__) {\n        // eslint-disable-next-line no-console\n        console.warn(`Failed to decode tcString ${tcString}:`, e);\n      }\n    }\n\n    return {\n      activelyScanDeviceCharacteristicsForIdentification: tcModel.specialFeatureOptins.has(\n        AdsConsentSpecialFeatures.ACTIVELY_SCAN_DEVICE_CHARACTERISTICS_FOR_IDENTIFICATION,\n      ),\n      applyMarketResearchToGenerateAudienceInsights: tcModel.purposeConsents.has(\n        AdsConsentPurposes.APPLY_MARKET_RESEARCH_TO_GENERATE_AUDIENCE_INSIGHTS,\n      ),\n      createAPersonalisedAdsProfile: tcModel.purposeConsents.has(\n        AdsConsentPurposes.CREATE_A_PERSONALISED_ADS_PROFILE,\n      ),\n      createAPersonalisedContentProfile: tcModel.purposeConsents.has(\n        AdsConsentPurposes.CREATE_A_PERSONALISED_ADS_PROFILE,\n      ),\n      developAndImproveProducts: tcModel.purposeConsents.has(\n        AdsConsentPurposes.DEVELOP_AND_IMPROVE_PRODUCTS,\n      ),\n      measureAdPerformance: tcModel.purposeConsents.has(AdsConsentPurposes.MEASURE_AD_PERFORMANCE),\n      measureContentPerformance: tcModel.purposeConsents.has(\n        AdsConsentPurposes.MEASURE_CONTENT_PERFORMANCE,\n      ),\n      selectBasicAds: tcModel.purposeConsents.has(AdsConsentPurposes.SELECT_BASIC_ADS),\n      selectPersonalisedAds: tcModel.purposeConsents.has(\n        AdsConsentPurposes.SELECT_PERSONALISED_ADS,\n      ),\n      selectPersonalisedContent: tcModel.purposeConsents.has(\n        AdsConsentPurposes.SELECT_PERSONALISED_CONTENT,\n      ),\n      storeAndAccessInformationOnDevice: tcModel.purposeConsents.has(\n        AdsConsentPurposes.STORE_AND_ACCESS_INFORMATION_ON_DEVICE,\n      ),\n      usePreciseGeolocationData: tcModel.specialFeatureOptins.has(\n        AdsConsentSpecialFeatures.USE_PRECISE_GEOLOCATION_DATA,\n      ),\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"module"}