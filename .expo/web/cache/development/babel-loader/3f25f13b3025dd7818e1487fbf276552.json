{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { PermissionStatus, createPermissionHook, UnavailabilityError } from 'expo-modules-core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ExpoAdsAdMob from \"./ExpoAdsAdMob\";\nexport { PermissionStatus };\nvar androidPermissionsResponse = {\n  granted: true,\n  expires: 'never',\n  canAskAgain: true,\n  status: PermissionStatus.GRANTED\n};\nexport function requestPermissionsAsync() {\n  return _requestPermissionsAsync.apply(this, arguments);\n}\n\nfunction _requestPermissionsAsync() {\n  _requestPermissionsAsync = _asyncToGenerator(function* () {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(androidPermissionsResponse);\n    }\n\n    if (!ExpoAdsAdMob.requestPermissionsAsync) {\n      throw new UnavailabilityError('AdMod', 'requestPermissionsAsync');\n    }\n\n    return yield ExpoAdsAdMob.requestPermissionsAsync();\n  });\n  return _requestPermissionsAsync.apply(this, arguments);\n}\n\nexport function getPermissionsAsync() {\n  return _getPermissionsAsync.apply(this, arguments);\n}\n\nfunction _getPermissionsAsync() {\n  _getPermissionsAsync = _asyncToGenerator(function* () {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(androidPermissionsResponse);\n    }\n\n    if (!ExpoAdsAdMob.getPermissionsAsync) {\n      throw new UnavailabilityError('AdMod', 'getPermissionsAsync');\n    }\n\n    return yield ExpoAdsAdMob.getPermissionsAsync();\n  });\n  return _getPermissionsAsync.apply(this, arguments);\n}\n\nexport var usePermissions = createPermissionHook({\n  getMethod: getPermissionsAsync,\n  requestMethod: requestPermissionsAsync\n});\nexport function isAvailableAsync() {\n  return _isAvailableAsync.apply(this, arguments);\n}\n\nfunction _isAvailableAsync() {\n  _isAvailableAsync = _asyncToGenerator(function* () {\n    return !!ExpoAdsAdMob.setTestDeviceIDAsync;\n  });\n  return _isAvailableAsync.apply(this, arguments);\n}\n\nexport function setTestDeviceIDAsync(_x) {\n  return _setTestDeviceIDAsync.apply(this, arguments);\n}\n\nfunction _setTestDeviceIDAsync() {\n  _setTestDeviceIDAsync = _asyncToGenerator(function* (testDeviceID) {\n    if (!ExpoAdsAdMob.setTestDeviceIDAsync) {\n      throw new UnavailabilityError('expo-ads-admob', 'setTestDeviceIDAsync');\n    }\n\n    yield ExpoAdsAdMob.setTestDeviceIDAsync(testDeviceID || '');\n  });\n  return _setTestDeviceIDAsync.apply(this, arguments);\n}","map":{"version":3,"mappings":";AAAA,SAEEA,gBAFF,EAKEC,oBALF,EAMEC,mBANF,QAOO,mBAPP;;AAUA,OAAOC,YAAP;AAEA,SAA6BH,gBAA7B;AAEA,IAAMI,0BAA0B,GAAuB;EACrDC,OAAO,EAAE,IAD4C;EAErDC,OAAO,EAAE,OAF4C;EAGrDC,WAAW,EAAE,IAHwC;EAIrDC,MAAM,EAAER,gBAAgB,CAACS;AAJ4B,CAAvD;AAOA,gBAAsBC,uBAAtB;EAAA;AAAA;;;+CAAO,aAAsC;IAC3C,IAAIC,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;MAC7B,OAAOC,OAAO,CAACC,OAAR,CAAgBV,0BAAhB,CAAP;IACD;;IAED,IAAI,CAACD,YAAY,CAACO,uBAAlB,EAA2C;MACzC,MAAM,IAAIR,mBAAJ,CAAwB,OAAxB,EAAiC,yBAAjC,CAAN;IACD;;IACD,aAAaC,YAAY,CAACO,uBAAb,EAAb;EACD,C;;;;AAED,gBAAsBK,mBAAtB;EAAA;AAAA;;;2CAAO,aAAkC;IACvC,IAAIJ,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;MAC7B,OAAOC,OAAO,CAACC,OAAR,CAAgBV,0BAAhB,CAAP;IACD;;IAED,IAAI,CAACD,YAAY,CAACY,mBAAlB,EAAuC;MACrC,MAAM,IAAIb,mBAAJ,CAAwB,OAAxB,EAAiC,qBAAjC,CAAN;IACD;;IACD,aAAaC,YAAY,CAACY,mBAAb,EAAb;EACD,C;;;;AAYD,OAAO,IAAMC,cAAc,GAAGf,oBAAoB,CAAC;EACjDgB,SAAS,EAAEF,mBADsC;EAEjDG,aAAa,EAAER;AAFkC,CAAD,CAA3C;AAUP,gBAAsBS,gBAAtB;EAAA;AAAA;;;wCAAO,aAA+B;IACpC,OAAO,CAAC,CAAChB,YAAY,CAACiB,oBAAtB;EACD,C;;;;AAED,gBAAsBA,oBAAtB;EAAA;AAAA;;;4CAAO,WAAoCC,YAApC,EAA+D;IACpE,IAAI,CAAClB,YAAY,CAACiB,oBAAlB,EAAwC;MACtC,MAAM,IAAIlB,mBAAJ,CAAwB,gBAAxB,EAA0C,sBAA1C,CAAN;IACD;;IACD,MAAMC,YAAY,CAACiB,oBAAb,CAAkCC,YAAY,IAAI,EAAlD,CAAN;EACD,C","names":["PermissionStatus","createPermissionHook","UnavailabilityError","ExpoAdsAdMob","androidPermissionsResponse","granted","expires","canAskAgain","status","GRANTED","requestPermissionsAsync","Platform","OS","Promise","resolve","getPermissionsAsync","usePermissions","getMethod","requestMethod","isAvailableAsync","setTestDeviceIDAsync","testDeviceID"],"sourceRoot":"","sources":["../src/AdMob.ts"],"sourcesContent":["import {\n  PermissionResponse,\n  PermissionStatus,\n  PermissionExpiration,\n  PermissionHookOptions,\n  createPermissionHook,\n  UnavailabilityError,\n} from 'expo-modules-core';\nimport { Platform } from 'react-native';\n\nimport ExpoAdsAdMob from './ExpoAdsAdMob';\n\nexport { PermissionResponse, PermissionStatus, PermissionExpiration, PermissionHookOptions };\n\nconst androidPermissionsResponse: PermissionResponse = {\n  granted: true,\n  expires: 'never',\n  canAskAgain: true,\n  status: PermissionStatus.GRANTED,\n};\n\nexport async function requestPermissionsAsync(): Promise<PermissionResponse> {\n  if (Platform.OS === 'android') {\n    return Promise.resolve(androidPermissionsResponse);\n  }\n\n  if (!ExpoAdsAdMob.requestPermissionsAsync) {\n    throw new UnavailabilityError('AdMod', 'requestPermissionsAsync');\n  }\n  return await ExpoAdsAdMob.requestPermissionsAsync();\n}\n\nexport async function getPermissionsAsync(): Promise<PermissionResponse> {\n  if (Platform.OS === 'android') {\n    return Promise.resolve(androidPermissionsResponse);\n  }\n\n  if (!ExpoAdsAdMob.getPermissionsAsync) {\n    throw new UnavailabilityError('AdMod', 'getPermissionsAsync');\n  }\n  return await ExpoAdsAdMob.getPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Check or request permissions for AdMob.\n * This uses both `requestPermissionAsync` and `getPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = AdsAdMob.usePermission();\n * ```\n */\nexport const usePermissions = createPermissionHook({\n  getMethod: getPermissionsAsync,\n  requestMethod: requestPermissionsAsync,\n});\n\n/**\n * Returns whether the AdMob API is enabled on the current device. This does not check the native configuration.\n *\n * @returns Async `boolean`, indicating whether the AdMob API is available on the current device. Currently this resolves `true` on iOS and Android only.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return !!ExpoAdsAdMob.setTestDeviceIDAsync;\n}\n\nexport async function setTestDeviceIDAsync(testDeviceID: string | null): Promise<void> {\n  if (!ExpoAdsAdMob.setTestDeviceIDAsync) {\n    throw new UnavailabilityError('expo-ads-admob', 'setTestDeviceIDAsync');\n  }\n  await ExpoAdsAdMob.setTestDeviceIDAsync(testDeviceID || '');\n}\n"]},"metadata":{},"sourceType":"module"}