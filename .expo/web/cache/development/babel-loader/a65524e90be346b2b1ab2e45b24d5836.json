{"ast":null,"code":"import { isPropertySet, isArray, isBoolean, isObject } from \"./common\";\nimport { MaxAdContentRating } from \"./MaxAdContentRating\";\nexport function validateAdRequestConfiguration(requestConfiguration) {\n  var out = {};\n\n  if (!isObject(requestConfiguration)) {\n    throw new Error(\"'requestConfiguration' expected an object value\");\n  }\n\n  if (requestConfiguration.maxAdContentRating) {\n    if (requestConfiguration.maxAdContentRating !== MaxAdContentRating.G && requestConfiguration.maxAdContentRating !== MaxAdContentRating.PG && requestConfiguration.maxAdContentRating !== MaxAdContentRating.T && requestConfiguration.maxAdContentRating !== MaxAdContentRating.MA) {\n      throw new Error(\"'requestConfiguration.maxAdContentRating' expected on of MaxAdContentRating.G, MaxAdContentRating.PG, MaxAdContentRating.T or MaxAdContentRating.MA\");\n    }\n\n    out.maxAdContentRating = requestConfiguration.maxAdContentRating;\n  }\n\n  if (isPropertySet(requestConfiguration, 'tagForChildDirectedTreatment')) {\n    if (!isBoolean(requestConfiguration.tagForChildDirectedTreatment)) {\n      throw new Error(\"'requestConfiguration.tagForChildDirectedTreatment' expected a boolean value\");\n    }\n\n    out.tagForChildDirectedTreatment = requestConfiguration.tagForChildDirectedTreatment;\n  }\n\n  if (isPropertySet(requestConfiguration, 'tagForUnderAgeOfConsent')) {\n    if (!isBoolean(requestConfiguration.tagForUnderAgeOfConsent)) {\n      throw new Error(\"'requestConfiguration.tagForUnderAgeOfConsent' expected a boolean value\");\n    }\n\n    out.tagForUnderAgeOfConsent = requestConfiguration.tagForUnderAgeOfConsent;\n  }\n\n  if (isPropertySet(requestConfiguration, 'testDeviceIdentifiers')) {\n    if (!isArray(requestConfiguration.testDeviceIdentifiers)) {\n      throw new Error(\"'requestConfiguration.testDeviceIdentifiers' expected an array value\");\n    }\n\n    out.testDeviceIdentifiers = requestConfiguration.testDeviceIdentifiers;\n  }\n\n  return out;\n}","map":{"version":3,"mappings":"AAiBA,SAASA,aAAT,EAAwBC,OAAxB,EAAiCC,SAAjC,EAA4CC,QAA5C;AACA,SAASC,kBAAT;AAGA,OAAO,SAASC,8BAAT,CAAwCC,oBAAxC,EAAoF;EACzF,IAAMC,GAAyB,GAAG,EAAlC;;EAEA,IAAI,CAACJ,QAAQ,CAACG,oBAAD,CAAb,EAAqC;IACnC,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;EACF;;EAEA,IAAIF,oBAAoB,CAACG,kBAAzB,EAA6C;IAC3C,IACEH,oBAAoB,CAACG,kBAArBH,KAA4CF,kBAAkB,CAACM,CAA/DJ,IACAA,oBAAoB,CAACG,kBAArBH,KAA4CF,kBAAkB,CAACO,EAD/DL,IAEAA,oBAAoB,CAACG,kBAArBH,KAA4CF,kBAAkB,CAACQ,CAF/DN,IAGAA,oBAAoB,CAACG,kBAArBH,KAA4CF,kBAAkB,CAACS,EAJjE,EAKE;MACA,MAAM,IAAIL,KAAJ,CACJ,qJADI,CAAN;IAGF;;IAEAD,GAAG,CAACE,kBAAJF,GAAyBD,oBAAoB,CAACG,kBAA9CF;EACF;;EAEA,IAAIP,aAAa,CAACM,oBAAD,EAAuB,8BAAvB,CAAjB,EAAyE;IACvE,IAAI,CAACJ,SAAS,CAACI,oBAAoB,CAACQ,4BAAtB,CAAd,EAAmE;MACjE,MAAM,IAAIN,KAAJ,CACJ,8EADI,CAAN;IAGF;;IAEAD,GAAG,CAACO,4BAAJP,GAAmCD,oBAAoB,CAACQ,4BAAxDP;EACF;;EAEA,IAAIP,aAAa,CAACM,oBAAD,EAAuB,yBAAvB,CAAjB,EAAoE;IAClE,IAAI,CAACJ,SAAS,CAACI,oBAAoB,CAACS,uBAAtB,CAAd,EAA8D;MAC5D,MAAM,IAAIP,KAAJ,CAAU,yEAAV,CAAN;IACF;;IAEAD,GAAG,CAACQ,uBAAJR,GAA8BD,oBAAoB,CAACS,uBAAnDR;EACF;;EAEA,IAAIP,aAAa,CAACM,oBAAD,EAAuB,uBAAvB,CAAjB,EAAkE;IAChE,IAAI,CAACL,OAAO,CAACK,oBAAoB,CAACU,qBAAtB,CAAZ,EAA0D;MACxD,MAAM,IAAIR,KAAJ,CAAU,sEAAV,CAAN;IACF;;IAEAD,GAAG,CAACS,qBAAJT,GAA4BD,oBAAoB,CAACU,qBAAjDT;EACF;;EAEA,OAAOA,GAAP;AACF","names":["isPropertySet","isArray","isBoolean","isObject","MaxAdContentRating","validateAdRequestConfiguration","requestConfiguration","out","Error","maxAdContentRating","G","PG","T","MA","tagForChildDirectedTreatment","tagForUnderAgeOfConsent","testDeviceIdentifiers"],"sources":["validateAdRequestConfiguration.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isPropertySet, isArray, isBoolean, isObject } from './common';\nimport { MaxAdContentRating } from './MaxAdContentRating';\nimport { RequestConfiguration } from './types/RequestConfiguration';\n\nexport function validateAdRequestConfiguration(requestConfiguration: RequestConfiguration) {\n  const out: RequestConfiguration = {};\n\n  if (!isObject(requestConfiguration)) {\n    throw new Error(\"'requestConfiguration' expected an object value\");\n  }\n\n  if (requestConfiguration.maxAdContentRating) {\n    if (\n      requestConfiguration.maxAdContentRating !== MaxAdContentRating.G &&\n      requestConfiguration.maxAdContentRating !== MaxAdContentRating.PG &&\n      requestConfiguration.maxAdContentRating !== MaxAdContentRating.T &&\n      requestConfiguration.maxAdContentRating !== MaxAdContentRating.MA\n    ) {\n      throw new Error(\n        \"'requestConfiguration.maxAdContentRating' expected on of MaxAdContentRating.G, MaxAdContentRating.PG, MaxAdContentRating.T or MaxAdContentRating.MA\",\n      );\n    }\n\n    out.maxAdContentRating = requestConfiguration.maxAdContentRating;\n  }\n\n  if (isPropertySet(requestConfiguration, 'tagForChildDirectedTreatment')) {\n    if (!isBoolean(requestConfiguration.tagForChildDirectedTreatment)) {\n      throw new Error(\n        \"'requestConfiguration.tagForChildDirectedTreatment' expected a boolean value\",\n      );\n    }\n\n    out.tagForChildDirectedTreatment = requestConfiguration.tagForChildDirectedTreatment;\n  }\n\n  if (isPropertySet(requestConfiguration, 'tagForUnderAgeOfConsent')) {\n    if (!isBoolean(requestConfiguration.tagForUnderAgeOfConsent)) {\n      throw new Error(\"'requestConfiguration.tagForUnderAgeOfConsent' expected a boolean value\");\n    }\n\n    out.tagForUnderAgeOfConsent = requestConfiguration.tagForUnderAgeOfConsent;\n  }\n\n  if (isPropertySet(requestConfiguration, 'testDeviceIdentifiers')) {\n    if (!isArray(requestConfiguration.testDeviceIdentifiers)) {\n      throw new Error(\"'requestConfiguration.testDeviceIdentifiers' expected an array value\");\n    }\n\n    out.testDeviceIdentifiers = requestConfiguration.testDeviceIdentifiers;\n  }\n\n  return out;\n}\n"]},"metadata":{},"sourceType":"module"}