{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { APP_NATIVE_MODULE } from \"../constants\";\nimport { NativeError } from \"../NativeError\";\nimport { GoogleMobileAdsNativeEventEmitter } from \"../GoogleMobileAdsNativeEventEmitter\";\nimport { SharedEventEmitter } from \"../SharedEventEmitter\";\nimport { isFunction } from \"../../common\";\nvar NATIVE_MODULE_REGISTRY = {};\nvar NATIVE_MODULE_EVENT_SUBSCRIPTIONS = {};\n\nfunction nativeModuleKey(module) {\n  return (module._customUrlOrRegion || '') + \":\" + module.app.name + \":\" + module._config.namespace;\n}\n\nfunction nativeModuleMethodWrapped(namespace, method, argToPrepend) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var possiblePromise = method.apply(void 0, [].concat(_toConsumableArray(argToPrepend), args));\n\n    if (possiblePromise && possiblePromise.then) {\n      var jsStack = new Error().stack || '';\n      return possiblePromise.catch(function (nativeError) {\n        return Promise.reject(new NativeError(nativeError, jsStack, namespace));\n      });\n    }\n\n    return possiblePromise;\n  };\n}\n\nfunction nativeModuleWrapped(namespace, NativeModule, argToPrepend) {\n  var native = {};\n\n  if (!NativeModule) {\n    return NativeModule;\n  }\n\n  var properties = Object.keys(NativeModule);\n\n  for (var i = 0, len = properties.length; i < len; i++) {\n    var property = properties[i];\n\n    if (isFunction(NativeModule[property])) {\n      native[property] = nativeModuleMethodWrapped(namespace, NativeModule[property], argToPrepend);\n    } else {\n      native[property] = NativeModule[property];\n    }\n  }\n\n  return native;\n}\n\nfunction initialiseNativeModule(module) {\n  var config = module._config;\n  var key = nativeModuleKey(module);\n  var namespace = config.namespace,\n      nativeEvents = config.nativeEvents,\n      nativeModuleName = config.nativeModuleName;\n  var multiModuleRoot = {};\n  var multiModule = Array.isArray(nativeModuleName);\n  var nativeModuleNames = multiModule ? nativeModuleName : [nativeModuleName];\n\n  for (var i = 0; i < nativeModuleNames.length; i++) {\n    var nativeModule = NativeModules[nativeModuleNames[i]];\n\n    if (!multiModule && !nativeModule) {\n      throw new Error(getMissingModuleHelpText(namespace));\n    }\n\n    if (multiModule) {\n      multiModuleRoot[nativeModuleNames[i]] = !!nativeModule;\n    }\n\n    Object.assign(multiModuleRoot, nativeModuleWrapped(namespace, nativeModule, []));\n  }\n\n  if (nativeEvents && nativeEvents.length) {\n    for (var _i = 0, len = nativeEvents.length; _i < len; _i++) {\n      subscribeToNativeModuleEvent(nativeEvents[_i]);\n    }\n  }\n\n  Object.freeze(multiModuleRoot);\n  NATIVE_MODULE_REGISTRY[key] = multiModuleRoot;\n  return NATIVE_MODULE_REGISTRY[key];\n}\n\nfunction subscribeToNativeModuleEvent(eventName) {\n  if (!NATIVE_MODULE_EVENT_SUBSCRIPTIONS[eventName]) {\n    GoogleMobileAdsNativeEventEmitter.addListener(eventName, function (event) {\n      if (event.appName) {\n        SharedEventEmitter.emit(event.appName + \"-\" + eventName, event);\n      } else {\n        SharedEventEmitter.emit(eventName, event);\n      }\n    });\n    NATIVE_MODULE_EVENT_SUBSCRIPTIONS[eventName] = true;\n  }\n}\n\nfunction getMissingModuleHelpText(namespace) {\n  var snippet = namespace + \"()\";\n  var nativeModule = namespace.charAt(0).toUpperCase() + namespace.slice(1);\n\n  if (Platform.OS === 'ios') {\n    return \"You attempted to use a module that's not installed natively on your iOS project by calling \" + snippet + \".\" + '\\r\\n\\r\\nEnsure you have either linked the module or added it to your projects Podfile.' + '\\r\\n\\r\\nSee http://invertase.link/ios for full setup instructions.';\n  }\n\n  var rnPackage = \"'io.invertase.\" + namespace + \".ReactNative\" + nativeModule + \"Package'\";\n  var newInstance = \"'new ReactNative\" + nativeModule + \"Package()'\";\n  return \"You attempted to use a module that's not installed on your Android project by calling \" + snippet + \".\" + (\"\\r\\n\\r\\nEnsure you have:\\r\\n\\r\\n1) imported the \" + rnPackage + \" module in your 'MainApplication.java' file.\\r\\n\\r\\n2) Added the \") + (newInstance + \" line inside of the RN 'getPackages()' method list.\") + '\\r\\n\\r\\nSee http://invertase.link/android for full setup instructions.';\n}\n\nexport function getNativeModule(module) {\n  var key = nativeModuleKey(module);\n\n  if (NATIVE_MODULE_REGISTRY[key]) {\n    return NATIVE_MODULE_REGISTRY[key];\n  }\n\n  return initialiseNativeModule(module);\n}\nexport function getAppModule() {\n  if (NATIVE_MODULE_REGISTRY[APP_NATIVE_MODULE]) {\n    return NATIVE_MODULE_REGISTRY[APP_NATIVE_MODULE];\n  }\n\n  var namespace = 'app';\n  var nativeModule = NativeModules[APP_NATIVE_MODULE];\n\n  if (!nativeModule) {\n    throw new Error(getMissingModuleHelpText(namespace));\n  }\n\n  NATIVE_MODULE_REGISTRY[APP_NATIVE_MODULE] = nativeModuleWrapped(namespace, nativeModule, []);\n  return NATIVE_MODULE_REGISTRY[APP_NATIVE_MODULE];\n}","map":{"version":3,"mappings":"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","names":["APP_NATIVE_MODULE","NativeError","GoogleMobileAdsNativeEventEmitter","SharedEventEmitter","isFunction","NATIVE_MODULE_REGISTRY","NATIVE_MODULE_EVENT_SUBSCRIPTIONS","nativeModuleKey","module","_customUrlOrRegion","app","name","_config","namespace","nativeModuleMethodWrapped","method","argToPrepend","args","_key","arguments","possiblePromise","then","jsStack","Error","stack","catch","nativeError","Promise","reject","nativeModuleWrapped","NativeModule","native","properties","Object","keys","i","len","length","property","initialiseNativeModule","config","key","nativeEvents","nativeModuleName","multiModuleRoot","multiModule","Array","isArray","nativeModuleNames","nativeModule","NativeModules","getMissingModuleHelpText","assign","subscribeToNativeModuleEvent","freeze","eventName","addListener","event","appName","emit","snippet","charAt","toUpperCase","slice","Platform","OS","rnPackage","newInstance","getNativeModule","getAppModule"],"sources":["nativeModule.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { NativeModules, Platform } from 'react-native';\nimport { APP_NATIVE_MODULE } from '../constants';\nimport { NativeError } from '../NativeError';\nimport { GoogleMobileAdsNativeEventEmitter } from '../GoogleMobileAdsNativeEventEmitter';\nimport { SharedEventEmitter } from '../SharedEventEmitter';\nimport { isFunction } from '../../common';\nimport { ModuleInterface } from '../../types/Module.interface';\n\nconst NATIVE_MODULE_REGISTRY: Record<string, unknown> = {};\nconst NATIVE_MODULE_EVENT_SUBSCRIPTIONS: Record<string, unknown> = {};\n\nfunction nativeModuleKey(module: ModuleInterface) {\n  return `${module._customUrlOrRegion || ''}:${module.app.name}:${module._config.namespace}`;\n}\n\n/**\n * Wraps a native module method to provide\n * auto prepended args and custom Error classes.\n *\n * @param namespace\n * @param method\n * @param argToPrepend\n * @returns {Function}\n */\nfunction nativeModuleMethodWrapped(\n  namespace: string,\n  method: (...args: unknown[]) => Promise<unknown> | void,\n  argToPrepend: [],\n) {\n  return (...args: []) => {\n    const possiblePromise = method(...[...argToPrepend, ...args]);\n\n    // @ts-ignore -- return type is Promise, so tsc infers we *know* it is a promise and .then always exists, but\n    //  but the typing is actually speculative, we do need to test it\n    if (possiblePromise && possiblePromise.then) {\n      const jsStack = new Error().stack || '';\n      return possiblePromise.catch(nativeError =>\n        Promise.reject(new NativeError(nativeError, jsStack, namespace)),\n      );\n    }\n\n    return possiblePromise;\n  };\n}\n\n/**\n * Prepends all arguments in prependArgs to all native method calls\n *\n * @param namespace\n * @param NativeModule\n * @param argToPrepend\n */\nfunction nativeModuleWrapped(\n  namespace: string,\n  NativeModule: Record<string, (...args: unknown[]) => Promise<unknown> | void>,\n  argToPrepend: [],\n) {\n  const native: Record<string, unknown> = {};\n  if (!NativeModule) {\n    return NativeModule;\n  }\n\n  const properties = Object.keys(NativeModule);\n\n  for (let i = 0, len = properties.length; i < len; i++) {\n    const property = properties[i];\n    if (isFunction(NativeModule[property])) {\n      native[property] = nativeModuleMethodWrapped(namespace, NativeModule[property], argToPrepend);\n    } else {\n      native[property] = NativeModule[property];\n    }\n  }\n\n  return native;\n}\n\n/**\n * Initialises and wraps all the native module methods.\n *\n * @param module\n * @returns {*}\n */\nfunction initialiseNativeModule(module: ModuleInterface) {\n  const config = module._config;\n  const key = nativeModuleKey(module);\n  const { namespace, nativeEvents, nativeModuleName } = config;\n  const multiModuleRoot: Record<string, unknown> = {};\n  const multiModule = Array.isArray(nativeModuleName);\n  const nativeModuleNames = multiModule ? nativeModuleName : [nativeModuleName];\n\n  for (let i = 0; i < nativeModuleNames.length; i++) {\n    const nativeModule = NativeModules[nativeModuleNames[i]];\n\n    // only error if there's a single native module\n    // as multi modules can mean some are optional\n    if (!multiModule && !nativeModule) {\n      throw new Error(getMissingModuleHelpText(namespace));\n    }\n\n    if (multiModule) {\n      multiModuleRoot[nativeModuleNames[i]] = !!nativeModule;\n    }\n\n    Object.assign(multiModuleRoot, nativeModuleWrapped(namespace, nativeModule, []));\n  }\n\n  if (nativeEvents && nativeEvents.length) {\n    for (let i = 0, len = nativeEvents.length; i < len; i++) {\n      subscribeToNativeModuleEvent(nativeEvents[i]);\n    }\n  }\n\n  Object.freeze(multiModuleRoot);\n\n  NATIVE_MODULE_REGISTRY[key] = multiModuleRoot;\n\n  return NATIVE_MODULE_REGISTRY[key];\n}\n\n/**\n * Subscribe to a native event for js side distribution by appName\n *    React Native events are hard set at compile - cant do dynamic event names\n *    so we use a single event send it to js and js then internally can prefix it\n *    and distribute dynamically.\n *\n * @param eventName\n * @private\n */\nfunction subscribeToNativeModuleEvent(eventName: string) {\n  if (!NATIVE_MODULE_EVENT_SUBSCRIPTIONS[eventName]) {\n    GoogleMobileAdsNativeEventEmitter.addListener(eventName, event => {\n      if (event.appName) {\n        // native event has an appName property - auto prefix and internally emit\n        SharedEventEmitter.emit(`${event.appName}-${eventName}`, event);\n      } else {\n        // standard event - no need to prefix\n        SharedEventEmitter.emit(eventName, event);\n      }\n    });\n\n    NATIVE_MODULE_EVENT_SUBSCRIPTIONS[eventName] = true;\n  }\n}\n\n/**\n * Help text for integrating the native counter parts for each module.\n *\n * @param namespace\n * @returns {string}\n */\nfunction getMissingModuleHelpText(namespace: string) {\n  const snippet = `${namespace}()`;\n  const nativeModule = namespace.charAt(0).toUpperCase() + namespace.slice(1);\n\n  if (Platform.OS === 'ios') {\n    return (\n      `You attempted to use a module that's not installed natively on your iOS project by calling ${snippet}.` +\n      '\\r\\n\\r\\nEnsure you have either linked the module or added it to your projects Podfile.' +\n      '\\r\\n\\r\\nSee http://invertase.link/ios for full setup instructions.'\n    );\n  }\n\n  const rnPackage = `'io.invertase.${namespace}.ReactNative${nativeModule}Package'`;\n  const newInstance = `'new ReactNative${nativeModule}Package()'`;\n\n  return (\n    `You attempted to use a module that's not installed on your Android project by calling ${snippet}.` +\n    `\\r\\n\\r\\nEnsure you have:\\r\\n\\r\\n1) imported the ${rnPackage} module in your 'MainApplication.java' file.\\r\\n\\r\\n2) Added the ` +\n    `${newInstance} line inside of the RN 'getPackages()' method list.` +\n    '\\r\\n\\r\\nSee http://invertase.link/android for full setup instructions.'\n  );\n}\n\n/**\n * Gets a wrapped native module instance for the provided module.\n * Will attempt to create a new instance if non previously created.\n *\n * @param module\n * @returns {*}\n */\nexport function getNativeModule(module: ModuleInterface) {\n  const key = nativeModuleKey(module);\n\n  if (NATIVE_MODULE_REGISTRY[key]) {\n    return NATIVE_MODULE_REGISTRY[key];\n  }\n\n  return initialiseNativeModule(module);\n}\n\n/**\n * Custom wrapped app module as it does not have it's own FirebaseModule based class.\n *\n * @returns {*}\n */\nexport function getAppModule() {\n  if (NATIVE_MODULE_REGISTRY[APP_NATIVE_MODULE]) {\n    return NATIVE_MODULE_REGISTRY[APP_NATIVE_MODULE];\n  }\n\n  const namespace = 'app';\n  const nativeModule = NativeModules[APP_NATIVE_MODULE];\n\n  if (!nativeModule) {\n    throw new Error(getMissingModuleHelpText(namespace));\n  }\n\n  NATIVE_MODULE_REGISTRY[APP_NATIVE_MODULE] = nativeModuleWrapped(namespace, nativeModule, []);\n\n  return NATIVE_MODULE_REGISTRY[APP_NATIVE_MODULE];\n}\n"]},"metadata":{},"sourceType":"module"}