{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nvar RNAppModule = NativeModules.RNAppModule;\n\nvar GANativeEventEmitter = function (_NativeEventEmitter) {\n  _inherits(GANativeEventEmitter, _NativeEventEmitter);\n\n  var _super = _createSuper(GANativeEventEmitter);\n\n  function GANativeEventEmitter() {\n    var _this;\n\n    _classCallCheck(this, GANativeEventEmitter);\n\n    _this = _super.call(this, RNAppModule);\n\n    _defineProperty(_assertThisInitialized(_this), \"ready\", void 0);\n\n    _this.ready = false;\n    return _this;\n  }\n\n  _createClass(GANativeEventEmitter, [{\n    key: \"addListener\",\n    value: function addListener(eventType, listener, context) {\n      var _this2 = this;\n\n      if (!this.ready) {\n        RNAppModule.eventsNotifyReady(true);\n        this.ready = true;\n      }\n\n      RNAppModule.eventsAddListener(eventType);\n\n      var subscription = _get(_getPrototypeOf(GANativeEventEmitter.prototype), \"addListener\", this).call(this, \"rnapp_\" + eventType, listener, context);\n\n      subscription.eventType = \"rnapp_\" + eventType;\n      var originalRemove = subscription.remove;\n\n      var newRemove = function newRemove() {\n        RNAppModule.eventsRemoveListener(eventType, false);\n\n        if (_get(_getPrototypeOf(GANativeEventEmitter.prototype), \"removeSubscription\", _this2) != null) {\n          _get(_getPrototypeOf(GANativeEventEmitter.prototype), \"removeSubscription\", _this2).call(_this2, subscription);\n        } else if (originalRemove != null) {\n          originalRemove();\n        }\n      };\n\n      subscription.remove = newRemove;\n      return subscription;\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventType) {\n      RNAppModule.eventsRemoveListener(eventType, true);\n\n      _get(_getPrototypeOf(GANativeEventEmitter.prototype), \"removeAllListeners\", this).call(this, \"rnapp_\" + eventType);\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription(subscription) {\n      RNAppModule.eventsRemoveListener(subscription.eventType.replace('rnapp_', ''), false);\n\n      if (_get(_getPrototypeOf(GANativeEventEmitter.prototype), \"removeSubscription\", this) != null) {\n        _get(_getPrototypeOf(GANativeEventEmitter.prototype), \"removeSubscription\", this).call(this, subscription);\n      }\n    }\n  }]);\n\n  return GANativeEventEmitter;\n}(NativeEventEmitter);\n\nexport var GoogleMobileAdsNativeEventEmitter = new GANativeEventEmitter();","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA,IAAQA,WAAR,GAAwBC,aAAxB,CAAQD,WAAR;;IAEME,oB;;;;;EAGJC,gCAAc;IAAA;;IAAA;;IACZ,0BAAMH,WAAN;;IAAmBI;;IACnB,MAAKC,KAAL,GAAa,KAAb;IAFY;EAGd;;;;WAEAC,qBACEC,SADFD,EAEEE,QAFFF,EAGEG,OAHFH,EAIE;MAAA;;MACA,IAAI,CAAC,KAAKD,KAAV,EAAiB;QACfL,WAAW,CAACU,iBAAZV,CAA8B,IAA9BA;QACA,KAAKK,KAAL,GAAa,IAAb;MACF;;MACAL,WAAW,CAACW,iBAAZX,CAA8BO,SAA9BP;;MAEA,IAAMY,YAAY,oGAA8BL,SAA9B,EAA2CC,QAA3C,EAAqDC,OAArD,CAAlB;;MAOAG,YAAY,CAACL,SAAbK,cAAkCL,SAAlCK;MAIA,IAAMC,cAAc,GAAGD,YAAY,CAACE,MAApC;;MACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;QACtBf,WAAW,CAACgB,oBAAZhB,CAAiCO,SAAjCP,EAA4C,KAA5CA;;QACA,IAAI,uFAA4B,IAAhC,EAAsC;UAEpC,iGAAyBY,YAAzB;QACD,CAHD,MAGO,IAAIC,cAAc,IAAI,IAAtB,EAA4B;UAEjCA,cAAc;QAChB;MACD,CATD;;MAUAD,YAAY,CAACE,MAAbF,GAAsBG,SAAtBH;MACA,OAAOA,YAAP;IACF;;;WAEAK,4BAAmBV,SAAnBU,EAAsC;MACpCjB,WAAW,CAACgB,oBAAZhB,CAAiCO,SAAjCP,EAA4C,IAA5CA;;MACA,wGAAkCO,SAAlC;IACF;;;WAGAW,4BAAmBN,YAAnBM,EAAsD;MACpDlB,WAAW,CAACgB,oBAAZhB,CAAiCY,YAAY,CAACL,SAAbK,CAAuBO,OAAvBP,CAA+B,QAA/BA,EAAyC,EAAzCA,CAAjCZ,EAA+E,KAA/EA;;MACA,IAAI,qFAA4B,IAAhC,EAAsC;QACpC,6FAAyBY,YAAzB;MACF;IACF;;;;EAxDiCQ,kB;;AA2DnC,OAAO,IAAMC,iCAAiC,GAAG,IAAInB,oBAAJ,EAA1C","names":["RNAppModule","NativeModules","GANativeEventEmitter","constructor","_defineProperty","ready","addListener","eventType","listener","context","eventsNotifyReady","eventsAddListener","subscription","originalRemove","remove","newRemove","eventsRemoveListener","removeAllListeners","removeSubscription","replace","NativeEventEmitter","GoogleMobileAdsNativeEventEmitter"],"sources":["GoogleMobileAdsNativeEventEmitter.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { NativeEventEmitter, NativeModules, EmitterSubscription } from 'react-native';\n\nconst { RNAppModule } = NativeModules;\n\nclass GANativeEventEmitter extends NativeEventEmitter {\n  ready: boolean;\n\n  constructor() {\n    super(RNAppModule);\n    this.ready = false;\n  }\n\n  addListener(\n    eventType: string,\n    listener: (event: { appName?: string }) => void,\n    context?: Record<string, unknown>,\n  ) {\n    if (!this.ready) {\n      RNAppModule.eventsNotifyReady(true);\n      this.ready = true;\n    }\n    RNAppModule.eventsAddListener(eventType);\n\n    const subscription = super.addListener(`rnapp_${eventType}`, listener, context);\n\n    // React Native 0.65+ altered EventEmitter:\n    // - removeSubscription is gone\n    // - addListener returns an unsubscriber instead of a more complex object with eventType etc\n\n    // make sure eventType for backwards compatibility just in case\n    subscription.eventType = `rnapp_${eventType}`;\n\n    // New style is to return a remove function on the object, just in csae people call that,\n    // we will modify it to do our native unsubscription then call the original\n    const originalRemove = subscription.remove;\n    const newRemove = () => {\n      RNAppModule.eventsRemoveListener(eventType, false);\n      if (super.removeSubscription != null) {\n        // This is for RN <= 0.64 - 65 and greater no longer have removeSubscription\n        super.removeSubscription(subscription);\n      } else if (originalRemove != null) {\n        // This is for RN >= 0.65\n        originalRemove();\n      }\n    };\n    subscription.remove = newRemove;\n    return subscription;\n  }\n\n  removeAllListeners(eventType: string) {\n    RNAppModule.eventsRemoveListener(eventType, true);\n    super.removeAllListeners(`rnapp_${eventType}`);\n  }\n\n  // This is likely no longer ever called, but it is here for backwards compatibility with RN <= 0.64\n  removeSubscription(subscription: EmitterSubscription) {\n    RNAppModule.eventsRemoveListener(subscription.eventType.replace('rnapp_', ''), false);\n    if (super.removeSubscription != null) {\n      super.removeSubscription(subscription);\n    }\n  }\n}\n\nexport const GoogleMobileAdsNativeEventEmitter = new GANativeEventEmitter();\n"]},"metadata":{},"sourceType":"module"}