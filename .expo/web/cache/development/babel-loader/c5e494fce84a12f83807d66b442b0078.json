{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { useMemo } from \"react\";\nimport useGlobalState from \"./useGlobalState\";\nimport { getExercises } from \"../services/day-workout\";\nimport { days, formatDate, months } from \"../utils/date\";\nimport { infoToast } from \"../components/toast\";\n\nvar useDate = function useDate() {\n  var _useGlobalState = useGlobalState(),\n      globalState = _useGlobalState.globalState,\n      setGlobalState = _useGlobalState.setGlobalState;\n\n  var detailDate = useMemo(function () {\n    if (globalState.date) {\n      var actualDate = globalState.date;\n      var dayName = days[actualDate.getDay()];\n\n      var _formatDate$split = formatDate(actualDate).split(\"/\"),\n          _formatDate$split2 = _slicedToArray(_formatDate$split, 2),\n          monthDay = _formatDate$split2[0],\n          monthNumber = _formatDate$split2[1];\n\n      var monthName = months[monthNumber - 1];\n      infoToast(String(monthName));\n      return dayName + \", \" + monthName + \" \" + monthDay;\n    }\n  }, [globalState.date]);\n\n  var updateWorkoutDay = function () {\n    var _ref = _asyncToGenerator(function* (newDate) {\n      setGlobalState(_objectSpread(_objectSpread({}, globalState), {}, {\n        date: newDate,\n        dayExercises: yield getExercises(newDate)\n      }));\n    });\n\n    return function updateWorkoutDay(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var operateDate = function () {\n    var _ref2 = _asyncToGenerator(function* (callback) {\n      var actualDate = globalState.date;\n      var newDay = callback(actualDate.getDate());\n      var miliseconds = actualDate.setDate(newDay);\n      var newDate = new Date(miliseconds);\n      updateWorkoutDay(newDate);\n    });\n\n    return function operateDate(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var decrementDay = function decrementDay() {\n    operateDate(function (date) {\n      return date - 1;\n    });\n  };\n\n  var incrementDay = function incrementDay() {\n    operateDate(function (date) {\n      return date + 1;\n    });\n  };\n\n  return {\n    detailDate: detailDate,\n    updateWorkoutDay: updateWorkoutDay,\n    decrementDay: decrementDay,\n    incrementDay: incrementDay\n  };\n};\n\nexport default useDate;","map":{"version":3,"names":["useMemo","useGlobalState","getExercises","days","formatDate","months","infoToast","useDate","globalState","setGlobalState","detailDate","date","actualDate","dayName","getDay","split","monthDay","monthNumber","monthName","String","updateWorkoutDay","newDate","dayExercises","operateDate","callback","newDay","getDate","miliseconds","setDate","Date","decrementDay","incrementDay"],"sources":["C:/Users/ROLANDO MORA/Documents/Proyectos/Entrenamientos/V2/src/hooks/useDate.js"],"sourcesContent":["import { useMemo } from \"react\";\r\nimport useGlobalState from \"./useGlobalState\";\r\nimport { getExercises } from \"../services/day-workout\";\r\nimport { days, formatDate, months } from \"../utils/date\";\r\nimport { infoToast } from \"../components/toast\";\r\n\r\nconst useDate = () => {\r\n    const { globalState, setGlobalState } = useGlobalState();\r\n\r\n    const detailDate = useMemo(() => {\r\n        if(globalState.date){\r\n            const actualDate = globalState.date;\r\n            const dayName = days[actualDate.getDay()];\r\n            const [monthDay, monthNumber] = formatDate(actualDate).split(\"/\");\r\n            const monthName = months[monthNumber - 1];\r\n            infoToast(String(monthName));\r\n            return `${dayName}, ${monthName} ${monthDay}`;\r\n        }\r\n    }, [globalState.date]);\r\n\r\n    const updateWorkoutDay = async newDate => {\r\n        setGlobalState({\r\n            ...globalState,\r\n            date: newDate,\r\n            dayExercises: await getExercises(newDate)}\r\n        );\r\n    }\r\n\r\n    const operateDate = async (callback) => {\r\n        const actualDate = globalState.date;\r\n        const newDay = callback(actualDate.getDate());\r\n        const miliseconds = actualDate.setDate(newDay);\r\n        const newDate = new Date(miliseconds);\r\n        updateWorkoutDay(newDate);\r\n    }\r\n\r\n    const decrementDay = () => {\r\n        operateDate(date => date - 1);\r\n    }\r\n\r\n    const incrementDay = () => {\r\n        operateDate(date => date + 1);\r\n    }\r\n\r\n    return {\r\n        detailDate,\r\n        updateWorkoutDay,\r\n        decrementDay,\r\n        incrementDay\r\n    }\r\n}\r\n\r\nexport default useDate;"],"mappings":";;;;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,OAAOC,cAAP;AACA,SAASC,YAAT;AACA,SAASC,IAAT,EAAeC,UAAf,EAA2BC,MAA3B;AACA,SAASC,SAAT;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;EAClB,sBAAwCN,cAAc,EAAtD;EAAA,IAAQO,WAAR,mBAAQA,WAAR;EAAA,IAAqBC,cAArB,mBAAqBA,cAArB;;EAEA,IAAMC,UAAU,GAAGV,OAAO,CAAC,YAAM;IAC7B,IAAGQ,WAAW,CAACG,IAAf,EAAoB;MAChB,IAAMC,UAAU,GAAGJ,WAAW,CAACG,IAA/B;MACA,IAAME,OAAO,GAAGV,IAAI,CAACS,UAAU,CAACE,MAAX,EAAD,CAApB;;MACA,wBAAgCV,UAAU,CAACQ,UAAD,CAAV,CAAuBG,KAAvB,CAA6B,GAA7B,CAAhC;MAAA;MAAA,IAAOC,QAAP;MAAA,IAAiBC,WAAjB;;MACA,IAAMC,SAAS,GAAGb,MAAM,CAACY,WAAW,GAAG,CAAf,CAAxB;MACAX,SAAS,CAACa,MAAM,CAACD,SAAD,CAAP,CAAT;MACA,OAAUL,OAAV,UAAsBK,SAAtB,SAAmCF,QAAnC;IACH;EACJ,CATyB,EASvB,CAACR,WAAW,CAACG,IAAb,CATuB,CAA1B;;EAWA,IAAMS,gBAAgB;IAAA,6BAAG,WAAMC,OAAN,EAAiB;MACtCZ,cAAc,iCACPD,WADO;QAEVG,IAAI,EAAEU,OAFI;QAGVC,YAAY,QAAQpB,YAAY,CAACmB,OAAD;MAHtB,GAAd;IAKH,CANqB;;IAAA,gBAAhBD,gBAAgB;MAAA;IAAA;EAAA,GAAtB;;EAQA,IAAMG,WAAW;IAAA,8BAAG,WAAOC,QAAP,EAAoB;MACpC,IAAMZ,UAAU,GAAGJ,WAAW,CAACG,IAA/B;MACA,IAAMc,MAAM,GAAGD,QAAQ,CAACZ,UAAU,CAACc,OAAX,EAAD,CAAvB;MACA,IAAMC,WAAW,GAAGf,UAAU,CAACgB,OAAX,CAAmBH,MAAnB,CAApB;MACA,IAAMJ,OAAO,GAAG,IAAIQ,IAAJ,CAASF,WAAT,CAAhB;MACAP,gBAAgB,CAACC,OAAD,CAAhB;IACH,CANgB;;IAAA,gBAAXE,WAAW;MAAA;IAAA;EAAA,GAAjB;;EAQA,IAAMO,YAAY,GAAG,SAAfA,YAAe,GAAM;IACvBP,WAAW,CAAC,UAAAZ,IAAI;MAAA,OAAIA,IAAI,GAAG,CAAX;IAAA,CAAL,CAAX;EACH,CAFD;;EAIA,IAAMoB,YAAY,GAAG,SAAfA,YAAe,GAAM;IACvBR,WAAW,CAAC,UAAAZ,IAAI;MAAA,OAAIA,IAAI,GAAG,CAAX;IAAA,CAAL,CAAX;EACH,CAFD;;EAIA,OAAO;IACHD,UAAU,EAAVA,UADG;IAEHU,gBAAgB,EAAhBA,gBAFG;IAGHU,YAAY,EAAZA,YAHG;IAIHC,YAAY,EAAZA;EAJG,CAAP;AAMH,CA5CD;;AA8CA,eAAexB,OAAf"},"metadata":{},"sourceType":"module"}