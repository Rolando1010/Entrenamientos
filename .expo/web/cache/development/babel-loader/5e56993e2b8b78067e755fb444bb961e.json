{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"unitId\", \"sizes\", \"requestOptions\", \"manualImpressionsEnabled\"];\nimport React, { useState, useEffect } from 'react';\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport { isFunction } from \"../common\";\nimport { NativeError } from \"../internal/NativeError\";\nimport { BannerAdSize } from \"../BannerAdSize\";\nimport { validateAdRequestOptions } from \"../validateAdRequestOptions\";\nvar sizeRegex = /([0-9]+)x([0-9]+)/;\nexport var BaseAd = React.forwardRef(function (_ref, ref) {\n  var unitId = _ref.unitId,\n      sizes = _ref.sizes,\n      requestOptions = _ref.requestOptions,\n      manualImpressionsEnabled = _ref.manualImpressionsEnabled,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useState = useState([0, 0]),\n      _useState2 = _slicedToArray(_useState, 2),\n      dimensions = _useState2[0],\n      setDimensions = _useState2[1];\n\n  useEffect(function () {\n    if (!unitId) {\n      throw new Error(\"BannerAd: 'unitId' expected a valid string unit ID.\");\n    }\n  }, [unitId]);\n  useEffect(function () {\n    if (sizes.length === 0 || !sizes.every(function (size) {\n      return size in BannerAdSize || sizeRegex.test(size);\n    })) {\n      throw new Error(\"BannerAd: 'size(s)' expected a valid BannerAdSize or custom size string.\");\n    }\n  }, [sizes]);\n  var parsedRequestOptions = JSON.stringify(requestOptions);\n  useEffect(function () {\n    if (requestOptions) {\n      try {\n        validateAdRequestOptions(requestOptions);\n      } catch (e) {\n        if (e instanceof Error) {\n          throw new Error(\"BannerAd: \" + e.message);\n        }\n      }\n    }\n  }, [parsedRequestOptions]);\n\n  function onNativeEvent(_ref2) {\n    var nativeEvent = _ref2.nativeEvent;\n    var type = nativeEvent.type;\n\n    if (type !== 'onSizeChange' && isFunction(props[type])) {\n      var eventHandler, eventPayload;\n\n      switch (type) {\n        case 'onAdLoaded':\n          eventPayload = {\n            width: nativeEvent.width,\n            height: nativeEvent.height\n          };\n          if (eventHandler = props[type]) eventHandler(eventPayload);\n          break;\n\n        case 'onAdFailedToLoad':\n          eventPayload = NativeError.fromEvent(nativeEvent, 'googleMobileAds');\n          if (eventHandler = props[type]) eventHandler(eventPayload);\n          break;\n\n        case 'onAppEvent':\n          eventPayload = {\n            name: nativeEvent.name,\n            data: nativeEvent.data\n          };\n          if (eventHandler = props[type]) eventHandler(eventPayload);\n          break;\n\n        default:\n          if (eventHandler = props[type]) eventHandler();\n      }\n    }\n\n    if (type === 'onAdLoaded' || type === 'onSizeChange') {\n      var width = nativeEvent.width,\n          height = nativeEvent.height;\n      if (width && height) setDimensions([width, height]);\n    }\n  }\n\n  var style = sizes.includes(BannerAdSize.FLUID) ? {\n    width: '100%',\n    height: dimensions[1]\n  } : {\n    width: dimensions[0],\n    height: dimensions[1]\n  };\n  return React.createElement(GoogleMobileAdsBannerView, {\n    ref: ref,\n    sizes: sizes,\n    style: style,\n    unitId: unitId,\n    request: validateAdRequestOptions(requestOptions),\n    manualImpressionsEnabled: !!manualImpressionsEnabled,\n    onNativeEvent: onNativeEvent\n  });\n});\nBaseAd.displayName = 'BaseAd';\nvar GoogleMobileAdsBannerView = requireNativeComponent('RNGoogleMobileAdsBannerView');","map":{"version":3,"mappings":"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","names":["React","useState","useEffect","requireNativeComponent","isFunction","NativeError","BannerAdSize","validateAdRequestOptions","sizeRegex","BaseAd","forwardRef","ref","unitId","_ref","sizes","requestOptions","manualImpressionsEnabled","props","dimensions","setDimensions","Error","length","every","size","test","parsedRequestOptions","JSON","stringify","e","message","onNativeEvent","_ref2","nativeEvent","type","eventHandler","eventPayload","width","height","fromEvent","name","data","style","includes","FLUID","GoogleMobileAdsBannerView","request","displayName"],"sources":["BaseAd.tsx"],"sourcesContent":["/* eslint-disable react/prop-types */\n/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { NativeMethods, requireNativeComponent } from 'react-native';\nimport { isFunction } from '../common';\nimport { NativeError } from '../internal/NativeError';\nimport { BannerAdSize } from '../BannerAdSize';\nimport { validateAdRequestOptions } from '../validateAdRequestOptions';\nimport { GAMBannerAdProps } from '../types/BannerAdProps';\nimport { RequestOptions } from '../types/RequestOptions';\n\ntype NativeEvent =\n  | {\n      type: 'onAdLoaded' | 'onSizeChange';\n      width: number;\n      height: number;\n    }\n  | { type: 'onAdOpened' | 'onAdClosed' }\n  | {\n      type: 'onAdFailedToLoad';\n      code: string;\n      message: string;\n    }\n  | {\n      type: 'onAppEvent';\n      name: string;\n      data?: string;\n    };\n\nconst sizeRegex = /([0-9]+)x([0-9]+)/;\n\nexport const BaseAd = React.forwardRef<GoogleMobileAdsBannerView, GAMBannerAdProps>(\n  ({ unitId, sizes, requestOptions, manualImpressionsEnabled, ...props }, ref) => {\n    const [dimensions, setDimensions] = useState<(number | string)[]>([0, 0]);\n\n    useEffect(() => {\n      if (!unitId) {\n        throw new Error(\"BannerAd: 'unitId' expected a valid string unit ID.\");\n      }\n    }, [unitId]);\n\n    useEffect(() => {\n      if (\n        sizes.length === 0 ||\n        !sizes.every(size => size in BannerAdSize || sizeRegex.test(size))\n      ) {\n        throw new Error(\"BannerAd: 'size(s)' expected a valid BannerAdSize or custom size string.\");\n      }\n    }, [sizes]);\n\n    const parsedRequestOptions = JSON.stringify(requestOptions);\n\n    useEffect(() => {\n      if (requestOptions) {\n        try {\n          validateAdRequestOptions(requestOptions);\n        } catch (e) {\n          if (e instanceof Error) {\n            throw new Error(`BannerAd: ${e.message}`);\n          }\n        }\n      }\n    }, [parsedRequestOptions]);\n\n    function onNativeEvent({ nativeEvent }: { nativeEvent: NativeEvent }) {\n      const { type } = nativeEvent;\n\n      if (type !== 'onSizeChange' && isFunction(props[type])) {\n        let eventHandler, eventPayload;\n        switch (type) {\n          case 'onAdLoaded':\n            eventPayload = {\n              width: nativeEvent.width,\n              height: nativeEvent.height,\n            };\n            if ((eventHandler = props[type])) eventHandler(eventPayload);\n            break;\n          case 'onAdFailedToLoad':\n            eventPayload = NativeError.fromEvent(nativeEvent, 'googleMobileAds');\n            if ((eventHandler = props[type])) eventHandler(eventPayload);\n            break;\n          case 'onAppEvent':\n            eventPayload = {\n              name: nativeEvent.name,\n              data: nativeEvent.data,\n            };\n            if ((eventHandler = props[type])) eventHandler(eventPayload);\n            break;\n          default:\n            if ((eventHandler = props[type])) eventHandler();\n        }\n      }\n\n      if (type === 'onAdLoaded' || type === 'onSizeChange') {\n        const { width, height } = nativeEvent;\n        if (width && height) setDimensions([width, height]);\n      }\n    }\n\n    const style = sizes.includes(BannerAdSize.FLUID)\n      ? {\n          width: '100%',\n          height: dimensions[1],\n        }\n      : {\n          width: dimensions[0],\n          height: dimensions[1],\n        };\n\n    return (\n      <GoogleMobileAdsBannerView\n        ref={ref}\n        sizes={sizes}\n        style={style}\n        unitId={unitId}\n        request={validateAdRequestOptions(requestOptions)}\n        manualImpressionsEnabled={!!manualImpressionsEnabled}\n        onNativeEvent={onNativeEvent}\n      />\n    );\n  },\n);\nBaseAd.displayName = 'BaseAd';\n\ninterface NativeBannerProps {\n  sizes: GAMBannerAdProps['sizes'];\n  style: {\n    width?: number | string;\n    height?: number | string;\n  };\n  unitId: string;\n  request: RequestOptions;\n  manualImpressionsEnabled: boolean;\n  onNativeEvent: (event: { nativeEvent: NativeEvent }) => void;\n}\n\nconst GoogleMobileAdsBannerView = requireNativeComponent<NativeBannerProps>(\n  'RNGoogleMobileAdsBannerView',\n);\nexport type GoogleMobileAdsBannerView = React.Component<NativeBannerProps> & NativeMethods;\n"]},"metadata":{},"sourceType":"module"}